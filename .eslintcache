[{"F:\\project\\gitDemo\\react-admin-demos\\src\\reportWebVitals.ts":"1","F:\\project\\gitDemo\\react-admin-demos\\src\\index.tsx":"2","F:\\project\\gitDemo\\react-admin-demos\\src\\store\\index.ts":"3","F:\\project\\gitDemo\\react-admin-demos\\src\\store\\const.ts":"4","F:\\project\\gitDemo\\react-admin-demos\\src\\store\\reducers.ts":"5","F:\\project\\gitDemo\\react-admin-demos\\src\\store\\types.ts":"6","F:\\project\\gitDemo\\react-admin-demos\\src\\store\\actions.ts":"7","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\home\\index.tsx":"8","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\login\\index.tsx":"9","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\redirect\\index.tsx":"10","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\layout\\index.tsx":"11","F:\\project\\gitDemo\\react-admin-demos\\src\\router\\index.tsx":"12","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\error\\index.tsx":"13","F:\\project\\gitDemo\\react-admin-demos\\src\\api\\index.ts":"14","F:\\project\\gitDemo\\react-admin-demos\\src\\router\\route.tsx":"15","F:\\project\\gitDemo\\react-admin-demos\\src\\components\\ReactParticles.tsx":"16","F:\\project\\gitDemo\\react-admin-demos\\src\\utils\\format.ts":"17","F:\\project\\gitDemo\\react-admin-demos\\src\\api\\axios.ts":"18","F:\\project\\gitDemo\\react-admin-demos\\src\\utils\\utils.ts":"19","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\register\\index.tsx":"20","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\forget\\index.tsx":"21","F:\\project\\gitDemo\\react-admin-demos\\src\\components\\tagsView\\TagsView.tsx":"22","F:\\project\\gitDemo\\react-admin-demos\\src\\components\\MyEcharts.tsx":"23","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleList\\index.tsx":"24","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleOperate\\index.tsx":"25","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleComment\\index.tsx":"26","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleTag\\index.tsx":"27","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\project\\index.tsx":"28","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\link\\index.tsx":"29","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\message\\index.tsx":"30","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\menu\\index.tsx":"31","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\user\\index.tsx":"32","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\role\\index.tsx":"33","F:\\project\\gitDemo\\blog-admin\\src\\index.tsx":"34","F:\\project\\gitDemo\\blog-admin\\src\\router\\index.tsx":"35","F:\\project\\gitDemo\\blog-admin\\src\\store\\reducers.ts":"36","F:\\project\\gitDemo\\blog-admin\\src\\utils\\utils.ts":"37","F:\\project\\gitDemo\\blog-admin\\src\\components\\ReactParticles.tsx":"38","F:\\project\\gitDemo\\blog-admin\\src\\pages\\error\\index.tsx":"39","F:\\project\\gitDemo\\blog-admin\\src\\pages\\articleTag\\index.tsx":"40","F:\\project\\gitDemo\\blog-admin\\src\\pages\\menu\\index.tsx":"41","F:\\project\\gitDemo\\blog-admin\\src\\pages\\user\\index.tsx":"42","F:\\project\\gitDemo\\blog-admin\\src\\components\\MyEcharts.tsx":"43","F:\\project\\gitDemo\\blog-admin\\src\\pages\\forget\\index.tsx":"44","F:\\project\\gitDemo\\blog-admin\\src\\utils\\format.ts":"45","F:\\project\\gitDemo\\blog-admin\\src\\pages\\link\\index.tsx":"46","F:\\project\\gitDemo\\blog-admin\\src\\pages\\project\\index.tsx":"47","F:\\project\\gitDemo\\blog-admin\\src\\pages\\articleList\\index.tsx":"48"},{"size":425,"mtime":1608887311546,"results":"49","hashOfConfig":"50"},{"size":727,"mtime":1611569570154,"results":"51","hashOfConfig":"50"},{"size":285,"mtime":1609829604714,"results":"52","hashOfConfig":"50"},{"size":77,"mtime":1610356048335,"results":"53","hashOfConfig":"50"},{"size":747,"mtime":1610961538243,"results":"54","hashOfConfig":"50"},{"size":50,"mtime":1609817014684,"results":"55","hashOfConfig":"56"},{"size":353,"mtime":1610356935981,"results":"57","hashOfConfig":"50"},{"size":18054,"mtime":1611819964588,"results":"58","hashOfConfig":"50"},{"size":6667,"mtime":1611991355441,"results":"59","hashOfConfig":"50"},{"size":168,"mtime":1609921579915,"results":"60","hashOfConfig":"56"},{"size":25442,"mtime":1612001101734,"results":"61","hashOfConfig":"50"},{"size":2476,"mtime":1611219389847,"results":"62","hashOfConfig":"50"},{"size":1042,"mtime":1611819700859,"results":"63","hashOfConfig":"50"},{"size":6477,"mtime":1613989585403,"results":"64","hashOfConfig":"50"},{"size":5468,"mtime":1612593345295,"results":"65","hashOfConfig":"50"},{"size":1854,"mtime":1610444998224,"results":"66","hashOfConfig":"50"},{"size":1580,"mtime":1612596991289,"results":"67","hashOfConfig":"50"},{"size":3804,"mtime":1611130941211,"results":"68","hashOfConfig":"50"},{"size":6539,"mtime":1611819720995,"results":"69","hashOfConfig":"50"},{"size":9638,"mtime":1611991373728,"results":"70","hashOfConfig":"50"},{"size":8716,"mtime":1611991302479,"results":"71","hashOfConfig":"50"},{"size":1843,"mtime":1611819751021,"results":"72","hashOfConfig":"50"},{"size":1522,"mtime":1611654762688,"results":"73","hashOfConfig":"50"},{"size":11093,"mtime":1612345448951,"results":"74","hashOfConfig":"50"},{"size":14403,"mtime":1612246062658,"results":"75","hashOfConfig":"50"},{"size":21784,"mtime":1612340204039,"results":"76","hashOfConfig":"50"},{"size":10309,"mtime":1614071006891,"results":"77","hashOfConfig":"50"},{"size":14971,"mtime":1613964055609,"results":"78","hashOfConfig":"50"},{"size":9733,"mtime":1614070981618,"results":"79","hashOfConfig":"50"},{"size":9532,"mtime":1612508274810,"results":"80","hashOfConfig":"50"},{"size":14789,"mtime":1613964046481,"results":"81","hashOfConfig":"50"},{"size":17645,"mtime":1613964073942,"results":"82","hashOfConfig":"50"},{"size":19191,"mtime":1614065729915,"results":"83","hashOfConfig":"50"},{"size":727,"mtime":1611569570154,"results":"84","hashOfConfig":"85"},{"size":2476,"mtime":1611219389847,"results":"86","hashOfConfig":"85"},{"size":747,"mtime":1610961538243,"results":"87","hashOfConfig":"85"},{"size":6539,"mtime":1611819720995,"results":"88","hashOfConfig":"85"},{"size":1854,"mtime":1610444998224,"results":"89","hashOfConfig":"85"},{"size":1042,"mtime":1611819700859,"results":"90","hashOfConfig":"85"},{"size":10309,"mtime":1614131387664,"results":"91","hashOfConfig":"85"},{"size":14793,"mtime":1614152116278,"results":"92","hashOfConfig":"85"},{"size":17645,"mtime":1613964073942,"results":"93","hashOfConfig":"85"},{"size":1522,"mtime":1611654762688,"results":"94","hashOfConfig":"85"},{"size":8716,"mtime":1611991302479,"results":"95","hashOfConfig":"85"},{"size":1580,"mtime":1612596991289,"results":"96","hashOfConfig":"85"},{"size":9733,"mtime":1614070981618,"results":"97","hashOfConfig":"85"},{"size":14971,"mtime":1613964055609,"results":"98","hashOfConfig":"85"},{"size":11093,"mtime":1612345448951,"results":"99","hashOfConfig":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oyu9xt",{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nljl78",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"119"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"119"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"141"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"114"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"174"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"114"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"141"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"114"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ytecz",{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\project\\gitDemo\\react-admin-demos\\src\\reportWebVitals.ts",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\index.tsx",[],["221","222"],"F:\\project\\gitDemo\\react-admin-demos\\src\\store\\index.ts",[],["223","224"],"F:\\project\\gitDemo\\react-admin-demos\\src\\store\\const.ts",[],["225","226"],"F:\\project\\gitDemo\\react-admin-demos\\src\\store\\reducers.ts",["227"],"import { ModifyAction } from './actions'\r\nimport { StoreTypes } from './const'\r\nimport { StoreState } from './types'\r\n\r\nexport let StoreStateData:StoreState = {\r\n  // 用户信息\r\n  userInfo: {\r\n    status: '',\r\n    avatarId: '',\r\n    mark: '',\r\n    _id: '',\r\n    avatar: '',\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    password: null,\r\n    roleId: {},\r\n    createTime: '',\r\n    updateTime: '',\r\n    info: ''\r\n  }\r\n}\r\n// 对action进行限制，必须是在ModifyAction定义的\r\nexport default (state = StoreStateData, action: ModifyAction):StoreState  => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case StoreTypes.USERINFO:\r\n      let userInfo = payload;\r\n      return { ...state, userInfo};\r\n  }\r\n  return state;\r\n}",["228","229"],"F:\\project\\gitDemo\\react-admin-demos\\src\\store\\types.ts",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\store\\actions.ts",[],["230","231"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\home\\index.tsx",["232","233"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\login\\index.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\redirect\\index.tsx",[],["234","235"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\layout\\index.tsx",["236"],"import React, { useState, useEffect } from \"react\";\r\nimport { Switch, useHistory, Link } from 'react-router-dom'\r\nimport { Menu, Breadcrumb, Drawer, Badge, message, Empty, Dropdown, Avatar, Modal, Button, Form, Input, Upload, Progress, } from 'antd';\r\nimport {\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n  BellOutlined,\r\n  CloseCircleFilled,\r\n  UserOutlined,\r\n  EditOutlined,\r\n  FireOutlined,\r\n  HomeOutlined,\r\n  LinkOutlined,\r\n  LogoutOutlined,\r\n} from '@ant-design/icons';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport { StoreState } from '@/store/types'\r\nimport { setUserInfo } from '@/store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { Dispatch } from 'redux'\r\nimport { getRouteArr, RouteWithSubRoutes, RoutersArr } from \"@/router/route\";\r\nimport { constantData} from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\nimport { baseURL } from \"@/api/axios\";\r\nimport api from '@/api/index';\r\nimport TagsView from '@/components/tagsView/TagsView';\r\nimport \"./index.scss\";\r\n\r\n\r\nconst BasicLayout = (props:any) => {\r\n  const history = useHistory();\r\n  const { SubMenu } = Menu;\r\n  const { TextArea } = Input;\r\n  const [personForm] = Form.useForm();\r\n  const [pwdForm] = Form.useForm();\r\n  const [stateForm] = Form.useForm();\r\n  const statementArr = [\r\n    {\r\n      name: 'monday',\r\n      label: '星期一',\r\n      info: '星期一励志语句'\r\n    },\r\n    {\r\n      name: 'tuesday',\r\n      label: '星期二',\r\n      info: '星期二励志语句'\r\n    },\r\n    {\r\n      name: 'wednesday',\r\n      label: '星期三',\r\n      info: '星期三励志语句'\r\n    },\r\n    {\r\n      name: 'thursday',\r\n      label: '星期四',\r\n      info: '星期四励志语句'\r\n    },\r\n    {\r\n      name: 'friday',\r\n      label: '星期五',\r\n      info: '星期五励志语句'\r\n    },\r\n    {\r\n      name: 'saturday',\r\n      label: '星期六',\r\n      info: '星期六励志语句'\r\n    },\r\n    {\r\n      name: 'sunday',\r\n      label: '星期日',\r\n      info: '星期日励志语句'\r\n    }\r\n  ]\r\n\r\n  let userInfo = props.stateData.userInfo;\r\n  let [collapse, getCollapse] = useState(false);\r\n  let [routeArr, getRoute] = useState<any[]>([]);\r\n  let [menuRouteArr, getMenuRouteArr] = useState<any[]>([]);\r\n  let [breadListArr, getBreadListArr] = useState<any[]>([]);\r\n  let [drawer, setDrawer] = useState(false);\r\n  let [badgeNum, setBadgeNum] = useState(0);\r\n  let [noticeLists, setNoticeLists] = useState<any[]>([]);\r\n  let [statementList, setStatementList] = useState<any[]>([]);\r\n  let [selectKeyArr, setSelectKeyArr] = useState<string[]>([]);\r\n  let [personVisible, setPersonVisible] = useState(false);\r\n  let [personLoading, setPersonLoading] = useState(false);\r\n  let [pwdVisible, setPwdVisible] = useState(false);\r\n  let [pwdLoading, setPwdLoading] = useState(false);\r\n  let [stateVisible, setStateVisible] = useState(false);\r\n  let [stateLoading, setStateLoading] = useState(false);\r\n  let [percent, setPercent] = useState(0);\r\n  let [userAvatarId, setUserAvatarId] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(sessionStorage.getItem('collapse') && sessionStorage.getItem('collapse') === '1'){\r\n      getCollapse(true)\r\n    }\r\n    // 消息提示\r\n    let noticeLists:any[] = []\r\n    let noticeStr = localStorage.getItem('noticeLists');\r\n    if(noticeStr && typeof noticeStr === 'string'){\r\n      noticeLists = JSON.parse(noticeStr);\r\n    }\r\n    if(noticeLists.length > 0){\r\n      let badgeNum = 0\r\n      noticeLists.forEach(item=>{\r\n        if(item.isRead === false){\r\n          badgeNum++\r\n        }\r\n      })\r\n      setBadgeNum(badgeNum)\r\n    }\r\n    setNoticeLists(noticeLists)\r\n    // 获取路由\r\n    let routeArrList = getRouteArr()\r\n    getRoute(routeArrList)\r\n    getMenuRouteArr(routeMenu(routeArrList))\r\n    getStatementList()\r\n\r\n   \r\n  }, [])\r\n\r\n  useEffect(()=>{\r\n    // 获取面包屑\r\n    getBreadCrumb()\r\n    // 获取默认高亮\r\n    getSelectKeyArr()\r\n  },[props.location.pathname])\r\n\r\n  // 获取高亮\r\n  const getSelectKeyArr =()=>{\r\n    let pathName:string = props.location.pathname;\r\n    if(pathName === '/article/comment' || pathName === '/article/edit'){\r\n      pathName = '/article/articleList'\r\n    }\r\n    let arr:string[] = [pathName];\r\n    setSelectKeyArr(arr)\r\n  }\r\n  // 获取面包屑\r\n  const getBreadCrumb = ()=>{\r\n    let breadList:any[] = [];\r\n    let pathName = props.location.pathname;\r\n    if(pathName === '/index'){\r\n      breadList = [{ path: '/index', name: '首页'}]\r\n    }else{\r\n      RoutersArr.forEach(item=>{\r\n        if(item.path === pathName){\r\n          if(item.supTitle){\r\n            breadList = [{ path: '/index', name: '首页'},{ path: '', name: item.supTitle},{ path: item.path, name: item.meta.title}]\r\n          }else{\r\n            breadList = [{ path: '/index', name: '首页'},{ path: item.path, name: item.meta.title}]\r\n          }\r\n        }\r\n      })\r\n    }\r\n    getBreadListArr(breadList)\r\n  }\r\n  // 路由数据转换成菜单形式\r\n  const routeMenu = (routeArrList: any[])=>{\r\n    let arr:any[]= routeArrList.filter(item => !item.hidden)\r\n    let tempArr :string[] = [];\r\n    let newArr:any[] = [];\r\n    arr.forEach(item=>{\r\n      if(item.supTitle){\r\n        if (tempArr.indexOf(item.supTitle) === -1) {\r\n          newArr.push({\r\n            title: item.supTitle,\r\n            path: item.supTitle,\r\n            icon: item.meta.icon,\r\n            children: [item]\r\n          });\r\n          tempArr.push(item.supTitle);\r\n        } else {\r\n          for (let j = 0; j < newArr.length; j++) {\r\n            if (newArr[j].title ===item.supTitle) {\r\n              newArr[j].children.push(item);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }else{\r\n        newArr.push(item)\r\n      }\r\n    })\r\n    return newArr\r\n  }\r\n  // 获取励志语句\r\n  const getStatementList = ()=>{\r\n    api.user.statementList({}).then(res=>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        setStatementList(res.data.data)\r\n      }\r\n    })\r\n  }\r\n  // 消息提示\r\n  const readAll = ()=>{\r\n    if(noticeLists.length > 0){\r\n      noticeLists.forEach(item=>{\r\n        item.isRead = true\r\n      })\r\n      setBadgeNum(0)\r\n      setNoticeLists(noticeLists)\r\n      localStorage.setItem('noticeLists',JSON.stringify(noticeLists))\r\n    }\r\n  }\r\n  const clearAll = ()=>{\r\n    if(noticeLists.length > 0){\r\n      setBadgeNum(0)\r\n      setNoticeLists([])\r\n      localStorage.removeItem('noticeLists')\r\n      message.success('消息已清空')\r\n    }\r\n  }\r\n  const readChange = (index:number)=>{\r\n    if(noticeLists[index].isRead === false){\r\n      noticeLists[index].isRead = true\r\n      badgeNum--\r\n      setBadgeNum(badgeNum)\r\n      setNoticeLists(noticeLists)\r\n      localStorage.setItem('noticeLists',JSON.stringify(noticeLists))\r\n    }\r\n  }\r\n  const clearSingle = (e:any, item:any, index:number)=>{\r\n    e.stopPropagation();\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    if(!item.isRead){\r\n      badgeNum--\r\n      setBadgeNum(badgeNum)\r\n    }\r\n    noticeLists.splice(index,1)\r\n    setNoticeLists([...noticeLists])\r\n    localStorage.setItem('noticeLists',JSON.stringify(noticeLists))\r\n  }\r\n  // 回到首页\r\n  const logoIndex = ()=>{\r\n    history.replace('/index')\r\n  }\r\n  // 侧边栏折叠\r\n  const collapseChange = ()=>{\r\n    if(collapse === true){\r\n      sessionStorage.setItem('collapse', '0')\r\n    }else{\r\n      sessionStorage.setItem('collapse', '1')\r\n    }\r\n    getCollapse(!collapse)\r\n  }\r\n  // 操作菜单栏\r\n  const handleCommand = (e:any)=>{\r\n    let key:string = e.key;\r\n    if(key === 'personal'){\r\n      setUserAvatarId(userInfo.avatarId)\r\n      personForm.resetFields();\r\n      personForm.setFieldsValue({ \r\n        name: userInfo.name,\r\n        email: userInfo.email,\r\n        phone: userInfo.phone,\r\n        info: userInfo.info,\r\n      })\r\n      setPersonVisible(true)\r\n    }else if(key === 'modifyPwd'){\r\n      pwdForm.resetFields();\r\n      setPwdVisible(true)\r\n    }else if(key === 'statement'){\r\n      stateForm.resetFields();\r\n      if(statementList.length > 0){\r\n        stateForm.setFieldsValue({ \r\n          monday: statementList[0].title,\r\n          tuesday: statementList[1].title,\r\n          wednesday: statementList[2].title,\r\n          thursday: statementList[3].title,\r\n          friday: statementList[4].title,\r\n          saturday: statementList[5].title,\r\n          sunday: statementList[6].title\r\n        })\r\n      }\r\n      setStateVisible(true)\r\n    }else if(key === 'blog'){\r\n      window.open(\"//sdjBlog.cn\")\r\n    }else if(key === 'github'){\r\n      window.open(\"https://github.com/SuDaoJun\")\r\n    }else if(key === 'logout'){\r\n      logouts()\r\n    }\r\n  }\r\n  const dropdownMenu = ()=>{\r\n    if(userInfo.roleId && userInfo.roleId.functionList.includes('5ea6fa245fb5d2567c6cad54')){\r\n      return <Menu onClick={handleCommand}>\r\n        <Menu.Item key=\"personal\" icon={<UserOutlined />}>个人资料</Menu.Item>\r\n        <Menu.Item key=\"modifyPwd\" icon={<EditOutlined />}>修改密码</Menu.Item>\r\n        <Menu.Item key=\"statement\" icon={<FireOutlined />}>励志语句</Menu.Item>\r\n        <Menu.Divider />\r\n        <Menu.Item key=\"blog\"  icon={<HomeOutlined />}>博客展示</Menu.Item>\r\n        <Menu.Item key=\"github\" icon={<LinkOutlined />}>Github</Menu.Item>\r\n        <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>退出登录</Menu.Item>\r\n      </Menu>\r\n    }else{\r\n      return <Menu onClick={handleCommand}>\r\n        <Menu.Item key=\"personal\" icon={<UserOutlined />}>个人资料</Menu.Item>\r\n        <Menu.Item key=\"modifyPwd\" icon={<EditOutlined />}>修改密码</Menu.Item>\r\n        <Menu.Divider />\r\n        <Menu.Item key=\"blog\"  icon={<HomeOutlined />}>博客展示</Menu.Item>\r\n        <Menu.Item key=\"github\" icon={<LinkOutlined />}>Github</Menu.Item>\r\n        <Menu.Item key=\"logout\" icon={<LogoutOutlined />}>退出登录</Menu.Item>\r\n      </Menu>\r\n    }\r\n  };\r\n  // 侧边菜单点击\r\n  const menuPathClick = (e:any)=>{\r\n    let path:string = e.key;\r\n    history.replace(path)\r\n  }\r\n  //个人资料\r\n  const personHandleOk = ()=>{\r\n    personForm.validateFields().then((values)=>{\r\n      setPersonLoading(true)\r\n      api.user.userUpdate({\r\n        id: userInfo._id,\r\n        avatarId: userAvatarId || userInfo.avatarId,\r\n        name: values.name,\r\n        email: values.email,\r\n        phone: values.phone,\r\n        info: values.info\r\n      }).then((res)=>{\r\n        setPersonLoading(false)\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          userInfo = res.data.data\r\n          sessionStorage.setItem('userInfo',JSON.stringify(userInfo))\r\n          props.setUserInfo(userInfo)\r\n          setPersonVisible(false)\r\n          message.success('更新信息成功')\r\n        }else if(code === constantData.dataAlready){\r\n          message.error('用户名已存在')\r\n          personForm.setFieldsValue({ \r\n            name: ''\r\n          })\r\n        }else if(code === constantData.statusFail){\r\n          message.error('邮箱已存在')\r\n          personForm.setFieldsValue({ \r\n            email: ''\r\n          })\r\n        }else{\r\n          message.error('更新信息失败')\r\n        }\r\n      }).catch(()=>{\r\n        setPersonLoading(false)\r\n      })\r\n    }).catch(()=>{});\r\n  }\r\n  const personUploadProps = {\r\n    accept: 'image/*',\r\n    showUploadList: false,\r\n    transformFile: (file: any)=>{\r\n      return file\r\n    },\r\n    beforeUpload: (file: any) => {\r\n      if(file.size >  1048576){\r\n        let sizeLimit = 1048576/1024/1024\r\n        message.warning(`大小限制在${sizeLimit}Mb以内`)\r\n        return false\r\n      }\r\n      setPercent(0)\r\n      let fd = new FormData()\r\n      fd.append('file', file)\r\n      api.upload.uploadFile(fd,(upload:any)=>{\r\n        let complete = (upload.loaded / upload.total * 100 | 0)\r\n        setPercent(complete)\r\n        if(complete === 100){\r\n          setTimeout(()=>{\r\n            setPercent(0)\r\n          },1000)\r\n        }\r\n      }).then((res) => {\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          let fileData = res.data.data\r\n          setUserAvatarId(fileData.sourceId)\r\n        }else{\r\n          setPercent(0)\r\n          message.warning('文件上传失败');\r\n        }\r\n      })\r\n      return false;\r\n    }\r\n  };\r\n  // 修改密码\r\n  const pwdHandleOk = ()=>{\r\n    pwdForm.validateFields().then((values)=>{\r\n      setPwdLoading(true)\r\n      api.user.modifyPwd({\r\n        password: values.oldPwd,\r\n        newPassword: values.newPwd\r\n      }).then((res)=>{\r\n        setPwdLoading(false)\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          setPwdVisible(false)\r\n          logouts()\r\n          message.success('密码修改成功，请重新登录');\r\n        }else if(code === constantData.dataFail){\r\n          message.error('用户不存在');\r\n        }else if(code === constantData.pwdFail){\r\n          message.error('原密码错误');\r\n        }else{\r\n          message.error('密码修改错误')\r\n        }\r\n      }).catch(()=>{\r\n        setPwdLoading(false)\r\n      })\r\n    }).catch(()=>{});\r\n  }\r\n  // 励志语句\r\n  const stateHandleOk = ()=>{\r\n    stateForm.validateFields().then((values)=>{\r\n      let idArr:string[] = []\r\n      let dataList:any[] = []\r\n      setStateLoading(true)\r\n      if(statementList.length > 0){\r\n        statementList.forEach(item=>{\r\n          idArr.push(item._id)\r\n        })\r\n      }\r\n      dataList = [\r\n        {\r\n          title: values.monday,\r\n          sortNum: 1\r\n        },\r\n        {\r\n          title: values.tuesday,\r\n          sortNum: 2\r\n        },\r\n        {\r\n          title: values.wednesday,\r\n          sortNum: 3\r\n        },\r\n        {\r\n          title: values.thursday,\r\n          sortNum: 4\r\n        },\r\n        {\r\n          title: values.friday,\r\n          sortNum: 5\r\n        },\r\n        {\r\n          title: values.saturday,\r\n          sortNum: 6\r\n        },\r\n        {\r\n          title: values.sunday,\r\n          sortNum: 7\r\n        }\r\n      ]\r\n      api.user.statementUpdate({\r\n        idArr,\r\n        dataList\r\n      }).then((res)=>{\r\n        setStateLoading(false)\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          setStateVisible(false)\r\n          getStatementList()\r\n          message.success('励志语句编辑成功');\r\n        }else{\r\n          message.error('励志语句编辑失败')\r\n        }\r\n      }).catch(()=>{\r\n        setStateLoading(false)\r\n      })\r\n    }).catch(()=>{});\r\n  }\r\n  \r\n  // 退出登录\r\n  const logouts = ()=>{\r\n    sessionStorage.removeItem('token')\r\n    history.replace('/login')\r\n  }\r\n  return (\r\n    <div className={collapse?\"index-layout index-collapse\":\"index-layout\"}>\r\n      <div className=\"layout-sidebar\">\r\n        {\r\n          collapse?\r\n          '':<div className=\"sider-logo\" onClick={logoIndex}>\r\n            {userInfo.name || 'Blog'}\r\n          </div>\r\n        }\r\n        <div className=\"sider-menu\">\r\n          <Menu\r\n            selectedKeys={selectKeyArr}\r\n            mode=\"inline\"\r\n            theme='dark'\r\n            onClick={menuPathClick}\r\n            inlineCollapsed={collapse}\r\n          >\r\n            {\r\n              menuRouteArr.map(item=>{\r\n                if(item.children && item.children.length > 0){\r\n                  return (<SubMenu key={item.path} icon={<span className={item.icon} />} title={item.title}>\r\n\r\n                    {item.children.map((itemData:any)=>{\r\n                      return <Menu.Item key={itemData.path}>{itemData.meta.title}</Menu.Item>\r\n                    })}\r\n                  </SubMenu>)\r\n                }else{\r\n                  return <Menu.Item key={item.path} icon={<span className={item.meta.icon} />}>\r\n                    {item.meta.title}\r\n                  </Menu.Item>\r\n                }\r\n              })\r\n            }\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n      <div className=\"layout-container\">\r\n        <div className=\"container-header fixed-header\">\r\n          <div className=\"info-header\">\r\n            <div className=\"header-left\">\r\n              <div className=\"left-collapse\" onClick={collapseChange}>\r\n                {collapse?<MenuUnfoldOutlined className='collapse-color' />:<MenuFoldOutlined className='collapse-color' />}\r\n              </div>\r\n              <TransitionGroup>\r\n                <CSSTransition\r\n                    timeout={300}\r\n                    classNames=\"slide\"\r\n                >\r\n                  <Breadcrumb>\r\n                    {\r\n                      breadListArr.map(item=>{\r\n                        return <Breadcrumb.Item key={item.name}>\r\n                          {\r\n                            item.path?<Link to={item.path}>{item.name}</Link>:item.name\r\n                          }\r\n                        </Breadcrumb.Item>\r\n                      })\r\n                    }\r\n                  </Breadcrumb>\r\n                </CSSTransition>\t\r\n              </TransitionGroup>\r\n            </div>\r\n            <div className=\"header-right\">\r\n              <div className=\"right-notice\" onClick={()=>{setDrawer(true)}}>\r\n                <Badge count={badgeNum} size=\"default\">\r\n                  <BellOutlined style={{fontSize: '22px', color: '#606266'}} />\r\n                </Badge>\r\n              </div>\r\n              <Dropdown overlay={dropdownMenu} trigger={['click']} placement='bottomCenter'>\r\n                <div className=\"el-dropdown-link\">\r\n                {userInfo.avatarId?<Avatar size={40} src={`${baseURL}/file/down?downId=${userInfo.avatarId}`} />:<Avatar size={40} icon={<UserOutlined />} />}\r\n                   <span className='link-name'>{userInfo.name || '--'}</span>\r\n                </div>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n          <TagsView props={props} />\r\n        </div>\r\n        <div className=\"container-show\">\r\n          <Switch>\r\n            {routeArr.map((route, i) => (\r\n              <RouteWithSubRoutes key={i} {...route} />\r\n            ))}\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n      {/* 操作消息中心 */}\r\n      <Drawer\r\n        title=\"消息中心\"\r\n        width={576}\r\n        getContainer={false}\r\n        onClose={()=>{setDrawer(false)}}\r\n        visible={drawer}\r\n      >\r\n        <div className=\"notice-clear\">\r\n          <div className=\"clear-all\" onClick={readAll}>全部已读</div>\r\n          <div className=\"clear-all\" onClick={clearAll}>清空消息</div>\r\n        </div>\r\n        {\r\n          noticeLists.map((item,index)=>{\r\n            return <div className={item.isRead?'notice-list notice-read':'notice-list'} key={index} onClick={()=>readChange(index)}>\r\n              <p>{item.createTime}</p>\r\n              <div className=\"box-info\">\r\n                <span>执行操作：</span>\r\n                <span className='info-operate'>{item.title}</span>\r\n              </div>\r\n              <CloseCircleFilled className=\"clear-single\" onClick={(e)=>clearSingle(e,item,index)} />\r\n            </div>\r\n          })\r\n        }\r\n        {\r\n          noticeLists.length === 0?<Empty description='暂无消息' image={Empty.PRESENTED_IMAGE_SIMPLE} />:''\r\n        }\r\n      </Drawer>\r\n      {/* 个人信息 */}\r\n      <Modal\r\n        title=\"个人资料\"\r\n        width={640}\r\n        maskClosable={false}\r\n        visible={personVisible}\r\n        okText='更新信息'\r\n        onOk={personHandleOk}\r\n        confirmLoading={personLoading}\r\n        onCancel={()=>{setPersonVisible(false)}}\r\n      >\r\n        <div className=\"person-info\">\r\n          <div className=\"info-avatar\">\r\n            {userAvatarId?<Avatar size={90} src={`${baseURL}/file/down?downId=${userAvatarId}`} />:<Avatar size={90} icon={<UserOutlined />} />}\r\n            <Upload  {...personUploadProps}>\r\n              <Button style={{margin: '10px 0'}}>{userAvatarId?'更换头像':'上传头像'}</Button>\r\n            </Upload>\r\n            {\r\n              percent === 0?'': <Progress\r\n                strokeColor={{\r\n                  '0%': '#108ee9',\r\n                  '100%': '#87d068',\r\n                }}\r\n                percent={percent}\r\n              />\r\n            }\r\n          </div>\r\n          <Form\r\n            form={personForm}\r\n            requiredMark={false}\r\n            className='form-modal'\r\n            validateTrigger='onBlur'\r\n          >\r\n            <Form.Item\r\n              label=\"角色：\"\r\n            >\r\n              <span>{userInfo.roleId?userInfo.roleId.name:'--'}</span>\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"name\"\r\n              label=\"用户名：\"\r\n              rules={FormValidate({name: '用户名'})}\r\n            >\r\n              <Input \r\n                maxLength={20} \r\n                allowClear={true} \r\n                placeholder=\"用户名\" \r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"邮箱：\"\r\n              rules={FormValidate({type: 'email', name: '邮箱'})}\r\n            >\r\n              <Input \r\n                maxLength={40} \r\n                allowClear={true} \r\n                placeholder=\"邮箱\" \r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"phone\"\r\n              label=\"手机号码：\"\r\n              rules={FormValidate({type: 'phone', name: '手机号', emptyBool: true})}\r\n            >\r\n              <Input \r\n                maxLength={11} \r\n                allowClear={true} \r\n                placeholder=\"手机号码\" \r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"info\"\r\n              label=\"个性签名：\"\r\n            >\r\n              <TextArea rows={3} maxLength={100} placeholder=\"个性签名\" />\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title=\"修改密码\"\r\n        width={640}\r\n        maskClosable={false}\r\n        visible={pwdVisible}\r\n        onOk={pwdHandleOk}\r\n        confirmLoading={pwdLoading}\r\n        onCancel={()=>{setPwdVisible(false)}}\r\n      >\r\n        <div className=\"person-info\">\r\n          <Form\r\n            form={pwdForm}\r\n            requiredMark={false}\r\n            className='form-modal'\r\n            validateTrigger='onBlur'\r\n          >\r\n            <Form.Item\r\n              name=\"oldPwd\"\r\n              label=\"原密码\"\r\n              rules={FormValidate({type:'password',name: '原密码'})}\r\n            >\r\n              <Input.Password \r\n                type=\"password\"\r\n                maxLength={16}\r\n                allowClear={true}\r\n                placeholder=\"原密码\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"newPwd\"\r\n              label=\"新密码\"\r\n              rules={FormValidate({type:'password',name: '新密码'})}\r\n            >\r\n              <Input.Password \r\n                type=\"password\"\r\n                maxLength={16}\r\n                allowClear={true}\r\n                placeholder=\"新密码\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"confirPwd\"\r\n              label=\"确认密码\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: '请输入确认密码',\r\n                },\r\n                {\r\n                  min: 6, max: 16, message: `字符长度为6-16个字符`\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('newPwd') === value || value.length < 6) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject('确认密码和新密码不一致');\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password \r\n                type=\"password\"\r\n                maxLength={16}\r\n                allowClear={true}\r\n                placeholder=\"确认密码\"\r\n              />\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        title=\"励志语句\"\r\n        width={640}\r\n        maskClosable={false}\r\n        visible={stateVisible}\r\n        onOk={stateHandleOk}\r\n        confirmLoading={stateLoading}\r\n        onCancel={()=>{setStateVisible(false)}}\r\n      >\r\n        <div className=\"person-info\">\r\n          <Form\r\n            form={stateForm}\r\n            requiredMark={false}\r\n            className='form-modal'\r\n            validateTrigger='onBlur'\r\n          >\r\n            {\r\n              statementArr.map(item=>{\r\n                return <Form.Item\r\n                  name={item.name}\r\n                  key={item.name}\r\n                  label={item.label}\r\n                  rules={FormValidate({name: item.info})}\r\n                >\r\n                  <Input \r\n                    maxLength={40} \r\n                    allowClear={true} \r\n                    placeholder={item.info}\r\n                  />\r\n                </Form.Item>\r\n              })\r\n            }\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setUserInfo: (userInfoObj:StoreState[\"userInfo\"]) => {\r\n    dispatch(setUserInfo(userInfoObj))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BasicLayout)\r\n","F:\\project\\gitDemo\\react-admin-demos\\src\\router\\index.tsx",["237"],"import React, { useCallback, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { StoreState } from '@/store/types'\r\nimport { setUserInfo } from '@/store/actions'\r\nimport { connect } from 'react-redux'\r\nimport { Dispatch } from 'redux'\r\n\r\nimport loadable from '@loadable/component'\r\n\r\nconst BasicLayout = loadable(() => import(/* webpackChunkName: \"BasicLayout\" */ '@/pages/layout/index'))\r\nconst Login = loadable(() => import(/* webpackChunkName: \"login\" */ '@/pages/login/index'))\r\nconst Register = loadable(() => import(/* webpackChunkName: \"register\" */ '@/pages/register/index'))\r\nconst Forget = loadable(() => import(/* webpackChunkName: \"forget\" */ '@/pages/forget/index'))\r\n\r\nconst Routers = (props: {\r\n  setUserInfo: (userInfoObj:StoreState[\"userInfo\"]) => void,\r\n}) => {\r\n  let { setUserInfo } = props;\r\n  useEffect(() => {\r\n    const userInfo = sessionStorage.getItem(\"userInfo\");\r\n    if(userInfo && typeof userInfo === 'string'){\r\n      let userInfoObj = JSON.parse(userInfo)\r\n      if(userInfoObj._id){\r\n        setUserInfo(userInfoObj)\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  /** 跳转到某个路由之前触发 **/\r\n  const onEnter = useCallback((Component, props) => {\r\n    /**\r\n     *  有用户信息，说明已登录\r\n     *  没有，则跳转至登录页\r\n     * **/\r\n    let pathname:string = props.location.pathname;\r\n    let whiteList:string[] = ['/login', '/404', '/register', '/forget'];\r\n    if(whiteList.indexOf(pathname) === -1){\r\n      if(sessionStorage.getItem('token')){\r\n        return <Component {...props} />;\r\n      }else{\r\n        return <Redirect to=\"/login\" />;\r\n      }\r\n    }else{\r\n      return <Component {...props} />;\r\n    }\r\n  }, []);\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/login\" render={(props) => onEnter(Login, props)} />\r\n        <Route exact path=\"/register\" render={(props) => onEnter(Register, props)} />\r\n        <Route exact path=\"/forget\" render={(props) => onEnter(Forget, props)} />\r\n        <Route path=\"/\" render={(props) => onEnter(BasicLayout, props)} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setUserInfo: (userInfoObj:StoreState[\"userInfo\"]) => {\r\n    dispatch(setUserInfo(userInfoObj))\r\n  }\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Routers)","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\error\\index.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\api\\index.ts",["238"],"F:\\project\\gitDemo\\react-admin-demos\\src\\router\\route.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\components\\ReactParticles.tsx",[],["239","240"],"F:\\project\\gitDemo\\react-admin-demos\\src\\utils\\format.ts",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\api\\axios.ts",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\utils\\utils.ts",[],["241","242"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\register\\index.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\forget\\index.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\components\\tagsView\\TagsView.tsx",["243"],"import React,{useState, useEffect} from 'react'\r\nimport { CloseOutlined,} from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { RoutersArr } from \"@/router/route\";\r\nimport './index.scss'\r\n\r\nconst TagsView = (data: any) => {\r\n  const history = useHistory();\r\n  let [tagsArr, setTagsArr] = useState<any[]>([{\r\n    path: '/index',\r\n    name: '首页',\r\n    affix: true\r\n  }]);\r\n\r\n  \r\n  let location = data.props.location;\r\n  useEffect(()=>{\r\n    let pathName = location.pathname;\r\n    let newTagsArr = tagsArr;\r\n    let filterArr = newTagsArr.filter(item=>item.path === pathName);\r\n    if(filterArr.length === 0){\r\n      RoutersArr.forEach(item=>{\r\n        if(item.path === pathName){\r\n          newTagsArr.push({\r\n            path: item.path,\r\n            name: item.meta.title\r\n          })\r\n        }\r\n      })\r\n      setTagsArr(newTagsArr)\r\n    }\r\n  },[location.pathname])\r\n\r\n  // 关闭当前tag\r\n  const closeTag = (e:any, path:string)=>{\r\n    e.stopPropagation();\r\n    e.nativeEvent.stopImmediatePropagation();\r\n    tagsArr = tagsArr.filter(item=>item.path !== path);\r\n    setTagsArr(tagsArr)\r\n    history.replace(tagsArr[tagsArr.length-1].path)\r\n  }\r\n  // 选择当前tag\r\n  const selectTag = (path:string)=>{\r\n    history.replace(path)\r\n  }\r\n\r\n  return (\r\n    <div className=\"tags-view-container\">\r\n      <div className=\"tags-view-wrapper scroll-container\">\r\n        {\r\n          tagsArr.map(item=>{\r\n            return <div className={item.path === location.pathname?\"tags-view-item active\":\"tags-view-item\"} key={item.name} onClick={()=>selectTag(item.path)}>\r\n              {item.name}\r\n              {item.affix?'':<CloseOutlined className='tags-icon-close' onClick={(e)=>closeTag(e,item.path)} />}\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TagsView","F:\\project\\gitDemo\\react-admin-demos\\src\\components\\MyEcharts.tsx",[],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleList\\index.tsx",["244"],"import React, { useState, useEffect} from \"react\";\r\nimport { Form, Input, Button, message, Select, DatePicker, Space, Tabs, Table, Image, Tag, Modal} from 'antd';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { baseURL } from \"@/api/axios\";\r\nimport { constantData, currentSelectTime } from '@/utils/utils';\r\n\r\nconst ArticleList = (props: any) => {\r\n  const history = props.history;\r\n  const { confirm } = Modal;\r\n  const { TabPane } = Tabs;\r\n  let userInfo = props.stateData.userInfo;\r\n  const { RangePicker } = DatePicker;\r\n  const [searchForm] = Form.useForm();\r\n  let [tagList, setTagList] = useState<any[]>([])\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n  let [articleStatus, setArticleStatus] = useState('1')\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '文章标题',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'title'\r\n    },\r\n    {\r\n      title: '文章封面',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'imgId',\r\n      render: (text:string, record:any) => (\r\n        <Image\r\n          width={60}\r\n          src={`${baseURL}/file/down?downId=${text}`}\r\n          fallback=\"https://gw.alipayobjects.com/zos/rmsportal/sfjbOqnsXXJgNCjCzDBL.png\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: '文章作者',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createUser',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createUser?record.createUser.name:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '浏览量',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'meta.viewTotal',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.meta.viewTotal || 0}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '点赞数',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'meta.likeTotal',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.meta.likeTotal || 0}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '评论数',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'meta.commentTotal',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.meta.commentTotal || 0}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '文章标签',\r\n      width: 200,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'tags',\r\n      render: (text:string, record:any) => (\r\n        <Space wrap>\r\n          {\r\n            record.tags.map((item:any)=>{\r\n              return <Tag key={item._id} color={item.bgColor}>{item.name}</Tag>\r\n            })\r\n          }\r\n          {\r\n            record.tags.length === 0?<span>--</span>:''\r\n          }\r\n        </Space>\r\n      )\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createTime?record.createTime.split(' ')[0]:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      width: 300,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834f2afb69305aa091e825')?\r\n            <Button className={articleStatus === '1'?'custom-button-info':'custom-button-success'} onClick={()=>updateStatus(record._id)}>{articleStatus === '1'?'转草稿':'发布'}</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99c1ccd1ba729a78b016b8')?\r\n            <Button className='custom-button-warning' onClick={()=>commentData(record._id,record.title)}>评论</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834f2afb69305aa091e825')?\r\n            <Button type='primary' onClick={()=>articleEdit(record._id,record.title)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834f31fb69305aa091e826')?\r\n            <Button type=\"primary\" danger onClick={()=>articleDel(record._id)}>删除</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    },\r\n  ]\r\n  // 修改文章状态\r\n  const updateStatus = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将修改文章状态, 是否继续?',\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.articleUpdate({\r\n            id,\r\n            status: articleStatus === '1'?'0':'1'\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('文章修改状态成功');\r\n            }else{\r\n              message.warning('文章修改状态失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 获取文章标签列表\r\n  const getTagsList = ()=>{\r\n    api.article.tagList({\r\n      currentPage: '1',\r\n      pageSize: '99'\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let list = res.data.data.data\r\n        setTagList([...list])\r\n      }else{\r\n        message.warning('获取标签列表失败');\r\n      }\r\n    })\r\n  }\r\n  // 查询数据\r\n  const resetSearch = ()=>{\r\n    searchForm.resetFields();\r\n    getDataList()\r\n  }\r\n  // 文章操作\r\n  const articleAdd = ()=>{\r\n    history.push('/article/articleAdd')\r\n  }\r\n  const articleEdit = (id:string, title:string)=>{\r\n    history.push({\r\n      pathname: '/article/edit',\r\n      state: {\r\n        articleId: id,\r\n        articleTitle: title\r\n      }\r\n    })\r\n  }\r\n  const articleDel = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将永久删除该文章及其评论, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.articleDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('文章删除成功');\r\n            }else{\r\n              message.warning('文章删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 文章评论\r\n  const commentData = (id:string, title:string)=>{\r\n    history.push({\r\n      pathname: '/article/comment',\r\n      state: {\r\n        articleId: id,\r\n        articleTitle: title\r\n      }\r\n    })\r\n  }\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.article.articleList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      title: formModel.title,\r\n      tags: formModel.tags,\r\n      status: articleStatus,\r\n      createTime: formModel.createTime?currentSelectTime(formModel.createTime[0])+','+currentSelectTime(formModel.createTime[1]):null,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取文章列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // tab切换\r\n  const tabsChange = (key:string)=>{\r\n    articleStatus = key\r\n    setArticleStatus(key)\r\n    getDataList()\r\n  }\r\n  useEffect(() => {\r\n    getTagsList()\r\n    getDataList()\r\n  }, []);\r\n\r\n  return <div className='article-wrapper'>\r\n     <h2 className='content-title'>文章列表</h2>\r\n     <div className=\"box-table\">\r\n      <Form\r\n         layout='inline'\r\n         form={searchForm}\r\n       >\r\n         <Form.Item label=\"文章标题\" name='title' className='margin-bottom-20'>\r\n            <Input \r\n             maxLength={20} \r\n             allowClear={true} \r\n             placeholder=\"文章标题\" \r\n           />\r\n         </Form.Item>\r\n         <Form.Item label=\"文章标签\" name='tags' className='margin-bottom-20'>\r\n            <Select allowClear={true} style={{width: '160px'}} placeholder=\"文章标签\">\r\n              {\r\n                tagList.map(item=>{\r\n                  return <Select.Option key={item._id} value={item._id}>{item.name}</Select.Option>\r\n                })\r\n              }\r\n            </Select>\r\n         </Form.Item>\r\n         <Form.Item label=\"创建时间\" name='createTime' className='margin-bottom-20'>\r\n            <RangePicker />\r\n         </Form.Item>\r\n         <Form.Item className='margin-left-30 margin-bottom-20'>\r\n            <Space size='large'>\r\n              <Button type=\"primary\" onClick={()=>getDataList()}>查询</Button>\r\n              {\r\n                userInfo.roleId.functionList.includes('5e834f23fb69305aa091e824')?<Button type=\"primary\" onClick={articleAdd}>新增</Button>:''\r\n              }\r\n              <Button onClick={resetSearch}>重置</Button>\r\n            </Space>\r\n         </Form.Item>\r\n       </Form>\r\n       <Tabs defaultActiveKey={articleStatus} size='large' onChange={tabsChange}>\r\n         <TabPane tab=\"已发布\" key=\"1\">\r\n         </TabPane>\r\n         <TabPane tab=\"草稿\" key=\"0\">\r\n         </TabPane>\r\n       </Tabs>\r\n       <div className=\"table-show\">\r\n       <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n         total: pageObj.total,\r\n         showTotal: ()=>`共 ${pageObj.total} 条`,\r\n         current: pageObj.currentPage,\r\n         pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n       </div>\r\n     </div>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(ArticleList)\r\n",["245","246"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleOperate\\index.tsx",["247","248","249","250","251"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Form, Input, Button, Select, message, Upload, Image, Space, Progress, Modal, Radio} from 'antd';\r\nimport { UploadOutlined  } from '@ant-design/icons';\r\nimport api from '@/api/index';\r\nimport { baseURL } from \"@/api/axios\";\r\nimport { constantData } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\nimport Wangeditor from 'wangeditor'\r\nimport hljs from 'highlight.js'\r\nimport 'highlight.js/styles/monokai-sublime.css'\r\nimport Editor from 'for-editor'\r\nimport \"./index.scss\";\r\nlet marked = require('marked')\r\n\r\nconst ArticleOperate = (props: any) => {\r\n  const history = props.history;\r\n  const { TextArea } = Input;\r\n  const [articleForm] = Form.useForm();\r\n  let toolbar = useRef<HTMLDivElement>(null);\r\n  let editor = useRef<HTMLDivElement>(null);\r\n  let state = props.location.state\r\n  let [type, setType] = useState('add')\r\n  let [articleTitle, setArticleTitle] = useState('')\r\n  let [sourceId, setSourceId] = useState('')\r\n  let [selectSourceId, setSelectSourceId] = useState('')\r\n  let [tagList, setTagList] = useState<any[]>([])\r\n  let [imgList, setImgList] = useState<any[]>([])\r\n  let [editorData, setEditorData] = useState<any>({})\r\n  let [id, setId] = useState('')\r\n  let [percent, setPercent] = useState(0);\r\n  let [contentType, setContentType] = useState('0');\r\n  let [markContent, setMarkContent] = useState('');\r\n  let [htmlContent, setHtmlContent] = useState('');\r\n  let [loadObj, setLoadObj] = useState({\r\n    draftLoad: false,\r\n    releaseLoad: false\r\n  });\r\n  let [dialogVisible, setDialogVisible] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    seteditor()\r\n    getTagsList()\r\n    getImgList()\r\n    if(state){\r\n      setType('edit')\r\n      setId(state.articleId)\r\n      setArticleTitle(state.articleTitle)\r\n      getDataDetail(state.articleId)\r\n    }else{\r\n      articleForm.setFieldsValue({ contentType: '0' })\r\n    }\r\n  }, []);\r\n  // 文章详情\r\n  const getDataDetail = (articleId:string)=>{\r\n    api.article.articleDetail({\r\n      id:articleId\r\n    }).then(res=>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let data = res.data.data\r\n        if(data.imgId){\r\n          setSourceId(data.imgId)\r\n        }\r\n        let tags:any[] = []\r\n        data.tags.forEach((item:any)=>{\r\n          tags.push(item._id)\r\n        })\r\n        articleForm.setFieldsValue({ title: data.title })\r\n        articleForm.setFieldsValue({ description: data.description })\r\n        articleForm.setFieldsValue({ tags: tags })\r\n        articleForm.setFieldsValue({ contentType: data.contentType })\r\n        setContentType(data.contentType)\r\n        if(data.contentType === '0'){\r\n          setHtmlContent(data.content)\r\n          editorData.txt.html(data.content)\r\n          setEditorData({...editorData})\r\n        }else{\r\n          setMarkContent(data.markContent)\r\n        }\r\n      }else{\r\n        message.warning('获取文章详情失败');\r\n      }\r\n    })\r\n  }\r\n  // 初始化富文本编辑器\r\n  const seteditor = ()=>{\r\n    editorData = new Wangeditor(toolbar.current, editor.current)\r\n    editorData.config.uploadImgShowBase64 = true; // // base 64 存储图片\r\n    editorData.config.uploadImgHeaders = {}; // 自定义 header\r\n    editorData.config.uploadFileName = \"file\"; // 后端接受上传文件的参数名\r\n    editorData.config.uploadImgMaxSize = 2 * 1024 * 1024; // 将图片大小限制为 2M\r\n    editorData.config.uploadImgMaxLength = 6; // 限制一次最多上传 6 张图片\r\n    editorData.config.uploadImgTimeout = 60 * 60 * 1000; // 设置超时时间\r\n    editorData.config.zIndex = 2; // 编辑区域和菜单的z-index\r\n    // 配置菜单\r\n    editorData.config.menus = [\r\n      \"head\", // 标题\r\n      \"bold\", // 粗体\r\n      \"fontSize\", // 字号\r\n      \"fontName\", // 字体\r\n      \"italic\", // 斜体\r\n      \"underline\", // 下划线\r\n      \"strikeThrough\", // 删除线\r\n      \"foreColor\", // 文字颜色\r\n      \"backColor\", // 背景颜色\r\n      \"link\", // 插入链接\r\n      \"list\", // 列表\r\n      \"justify\", // 对齐方式\r\n      \"quote\", // 引用\r\n      \"emoticon\", // 表情\r\n      \"image\", // 插入图片\r\n      \"table\", // 表格\r\n      \"video\", // 插入视频\r\n      \"code\", // 插入代码\r\n      \"undo\", // 撤销\r\n      \"redo\" // 重复\r\n    ];\r\n    editorData.config.onchange = (html:any) => {\r\n      setHtmlContent(editorData.txt.html())\r\n    };\r\n    editorData.highlight = hljs\r\n    // 创建富文本编辑器\r\n    editorData.create();\r\n    setEditorData({...editorData})\r\n  }\r\n  // 获取文章标签列表\r\n  const getTagsList = ()=>{\r\n    api.article.tagList({\r\n      currentPage: '1',\r\n      pageSize: '99'\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let list = res.data.data.data\r\n        setTagList([...list])\r\n      }else{\r\n        message.warning('获取标签列表失败');\r\n      }\r\n    })\r\n  }\r\n  const getImgList = ()=>{\r\n    api.article.articleImgStatistics({\r\n      num: 30\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let list:any[] = res.data.data;\r\n        list = list.filter((item:any)=>{\r\n          return item.imgId\r\n        })\r\n        setImgList([...list])\r\n      }else{\r\n        message.warning('获取图片列表失败');\r\n      }\r\n    })\r\n  }\r\n  \r\n  const imgUploadProps = {\r\n    accept: 'image/*',\r\n    showUploadList: false,\r\n    transformFile: (file: any)=>{\r\n      return file\r\n    },\r\n    beforeUpload: (file: any) => {\r\n      if(file.size >  1048576){\r\n        let sizeLimit = 1048576/1024/1024\r\n        message.warning(`大小限制在${sizeLimit}Mb以内`)\r\n        return false\r\n      }\r\n      setPercent(0)\r\n      let fd = new FormData()\r\n      fd.append('file', file)\r\n      api.upload.uploadFile(fd,(upload:any)=>{\r\n        let complete = (upload.loaded / upload.total * 100 | 0)\r\n        setPercent(complete)\r\n        if(complete === 100){\r\n          setTimeout(()=>{\r\n            setPercent(0)\r\n          },1000)\r\n        }\r\n      }).then((res) => {\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          let fileData = res.data.data\r\n          setSourceId(fileData.sourceId)\r\n        }else{\r\n          setPercent(0)\r\n          message.warning('文件上传失败');\r\n        }\r\n      })\r\n      return false;\r\n    }\r\n  };\r\n  // 封面选择\r\n  const dialogOpen = ()=>{\r\n    setSelectSourceId(sourceId)\r\n    setDialogVisible(true)\r\n  }\r\n  const confirSelect = ()=>{\r\n    if(selectSourceId){\r\n      setSourceId(selectSourceId)\r\n      setDialogVisible(false)\r\n    }else{\r\n      message.warning('请选择一个封面图片');\r\n    }\r\n  }\r\n  // 内容类型\r\n  const typeChange = (e:any)=>{\r\n    let value = e.target.value\r\n    setContentType(value)\r\n  }\r\n  const markChange = (value:any)=>{\r\n    setMarkContent(value)\r\n  }\r\n  const markdownAddImg = (file:any)=>{\r\n    if(file.size >  1048576){\r\n      let sizeLimit = 1048576/1024/1024\r\n      message.warning(`文件大小限制在${sizeLimit}Mb以内`)\r\n      return false\r\n    }\r\n    let fd = new FormData()\r\n    fd.append('file', file)\r\n    api.upload.uploadFile(fd,(upload:any)=>{\r\n\r\n    }).then((res) => {\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let fileData = res.data.data\r\n        setMarkContent(markContent + `![${file.name}](${fileData.url})`)\r\n      }else{\r\n        message.warning('文件上传失败');\r\n      }\r\n    })\r\n  }\r\n  // 提交文章\r\n  const  articleAdd = (status:string)=>{\r\n    articleForm.validateFields().then((values)=>{\r\n      let contentData = contentType == '1'?marked(markContent):htmlContent\r\n      if(contentData){\r\n        status === '0'?loadObj.draftLoad = true:loadObj.releaseLoad = true;\r\n        setLoadObj({...loadObj})\r\n        if(type === 'add'){\r\n          api.article.articleAdd({\r\n            title: values.title,\r\n            description: values.description,\r\n            content: contentData,\r\n            markContent: contentType === '1'?markContent:'',\r\n            contentType: contentType,\r\n            imgId: sourceId || null,\r\n            status,\r\n            tags: values.tags.join(',')\r\n          }).then((res)=>{\r\n            let code = res.data.code\r\n            status == '0'?loadObj.draftLoad = false:loadObj.releaseLoad = false\r\n            setLoadObj({...loadObj})\r\n            if(code === constantData.reqSuccess){\r\n              message.success('文章新增成功')\r\n              history.push('/article/articleList')\r\n            }else if(code === constantData.dataAlready){\r\n              articleForm.setFieldsValue({ title: '' })\r\n              message.warning('文章标题已存在')\r\n            }else{\r\n              message.warning('文章新增失败')\r\n            }\r\n          })\r\n        }else{\r\n          api.article.articleUpdate({\r\n            id,\r\n            title: values.title,\r\n            description: values.description,\r\n            contentType: values.contentType,\r\n            content: contentData,\r\n            markContent: contentType === '1'?markContent:'',\r\n            imgId: sourceId || null,\r\n            status,\r\n            tags: values.tags.join(',')\r\n          }).then((res)=>{\r\n            let code = res.data.code\r\n            status == '0'?loadObj.draftLoad = false:loadObj.releaseLoad = false\r\n            setLoadObj({...loadObj})\r\n            if(code === constantData.reqSuccess){\r\n              message.success('文章编辑成功')\r\n              history.push('/article/articleList')\r\n            }else if(code === constantData.dataAlready){\r\n              articleForm.setFieldsValue({ title: '' })\r\n              message.warning('文章标题已存在')\r\n            }else{\r\n              message.warning('文章编辑失败')\r\n            }\r\n          })\r\n        }\r\n      }else{\r\n        message.warning(\"文章内容不为空\")\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n\r\n  return <div className='article-operate'>\r\n    <h2 className='content-title'>{type === 'add'?\"创建文章\":(articleTitle?'编辑文章——'+articleTitle:'编辑文章')}</h2>\r\n    <div className=\"box-table\">\r\n      <Form\r\n        form={articleForm}\r\n        colon={false}\r\n        requiredMark={false}\r\n        validateTrigger='onBlur'\r\n        style={{width: '500px'}}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"文章标题\"\r\n          rules={FormValidate({name: '文章标题'})}\r\n        >\r\n          <Input \r\n            maxLength={20} \r\n            allowClear={true} \r\n            placeholder=\"文章标题\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"文章描述\"\r\n          rules={FormValidate({name: '文章描述'})}\r\n        >\r\n           <TextArea rows={2} maxLength={100} allowClear={true} placeholder=\"文章描述\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"tags\"\r\n          label=\"文章标签\"\r\n          validateTrigger='onChange'\r\n          rules={FormValidate({type: 'array',name: '文章标签'})}\r\n        >\r\n           <Select allowClear={true}  placeholder=\"文章标签\" mode=\"multiple\">\r\n             {\r\n               tagList.map(item=>{\r\n                 return <Select.Option key={item._id} value={item._id}>{item.name}</Select.Option>\r\n               })\r\n             }\r\n           </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"文章封面\"\r\n        >\r\n          <div className=\"upload-box\">\r\n            <Upload  {...imgUploadProps}>\r\n              {sourceId?<Image\r\n                width={120}\r\n                height={120}\r\n                preview={false}\r\n                style={{borderRadius: '4px'}}\r\n                src={`${baseURL}/file/down?downId=${sourceId}`}\r\n              />:<Button type=\"primary\" icon={<UploadOutlined />}>上传</Button>}\r\n              {\r\n                percent === 0?'': <Progress\r\n                  strokeColor={{\r\n                    '0%': '#108ee9',\r\n                    '100%': '#87d068',\r\n                  }}\r\n                  percent={percent}\r\n                />\r\n              }\r\n            </Upload>\r\n            <div className=\"select-txt\" onClick={dialogOpen}>封面选择</div>\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item name=\"contentType\" label=\"文章类型\">\r\n          <Radio.Group onChange={typeChange}>\r\n            <Radio value=\"0\">富文本编辑</Radio>\r\n            <Radio value=\"1\">markdown编辑</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n      </Form>\r\n      <div className=\"box-content\">\r\n        <span className='content-info'>文章内容</span>\r\n        <div className=\"editor\" style={{display: contentType === '0'?'block':'none'}}>\r\n          <div ref={toolbar} className=\"toolbar\">\r\n          </div>\r\n          <div ref={editor} className=\"text\">\r\n          </div>\r\n        </div>\r\n        {\r\n          contentType === '1'?<Editor \r\n            value={markContent}\r\n            placeholder='请输入...'\r\n            preview={true}\r\n            subfield={true}\r\n            height='542px'\r\n            style={{width: '100%'}}\r\n            addImg={markdownAddImg} \r\n            onChange={markChange} \r\n          />:''\r\n        }\r\n      </div>\r\n      <div className=\"box-btn\">\r\n        <Space size='large'>\r\n          <Button loading={loadObj.draftLoad} onClick={()=>{articleAdd('0')}}>存草稿</Button>\r\n          <Button type=\"primary\" loading={loadObj.releaseLoad}  onClick={()=>{articleAdd('1')}}>发布</Button>\r\n        </Space>\r\n      </div>\r\n    </div>\r\n    <Modal title=\"封面选择\" width={710} visible={dialogVisible} onOk={confirSelect} onCancel={()=>{setDialogVisible(false)}}>\r\n      <div className=\"dialog-list\">\r\n        {\r\n          imgList.map((item:any)=>{\r\n            return <div className={selectSourceId == item.imgId?'list-item item-active':'list-item'} key={item._id} onClick={()=>{setSelectSourceId(item.imgId)}}>\r\n              <Image\r\n                width={100}\r\n                height={100}\r\n                style={{borderRadius: '4px'}}\r\n                preview={false}\r\n                src={`${baseURL}/file/down?downId=${item.imgId}`}\r\n              />\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    </Modal>\r\n  </div>;\r\n};\r\n\r\nexport default ArticleOperate;\r\n",["252","253"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleComment\\index.tsx",["254","255"],"import React, { useState, useEffect} from \"react\";\r\nimport { Form, Input, Button, message, Select, DatePicker, Space, Table, Modal, Switch, Empty, Avatar} from 'antd';\r\nimport { MessageOutlined, UserOutlined, ClockCircleOutlined, CloseCircleOutlined, CheckCircleOutlined, EditOutlined, DeleteOutlined} from '@ant-design/icons';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { baseURL } from \"@/api/axios\";\r\nimport { constantData, currentSelectTime } from '@/utils/utils';\r\nimport \"./index.scss\";\r\n\r\nconst ArticleListComment = (props: any) => {\r\n  const { TextArea } = Input;\r\n  const state = props.location.state\r\n  const { confirm } = Modal;\r\n  let userInfo = props.stateData.userInfo;\r\n  const { RangePicker } = DatePicker;\r\n  const [searchForm] = Form.useForm();\r\n  let [articleTitle, setArticleTitle] = useState('')\r\n  let [articleId, setArticleId] = useState('')\r\n  let [commentValue, setCommentValue] = useState('')\r\n  let [commentObj, setCommentObj] = useState<any>({\r\n    modal: false,\r\n    loading: false,\r\n    type: 'add',\r\n    title: '',\r\n    content: '',\r\n    selectRow: {},\r\n  })\r\n  let [replayCommentObj, setReplayCommentObj] = useState<any>({\r\n    modal: false,\r\n    loading: false,\r\n    index: 0,\r\n    replyIndex: 0,\r\n    replyItem: {},\r\n    selectRow: {}\r\n  })\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '评论用户',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createUser',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createUser?record.createUser.name:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '评论内容',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'content',\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: '评论回复',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'replyCommentList',\r\n      render: (text:string, record:any, index:number) => (\r\n        <div className='flex-wrap' style={{color: '#409EFF', fontSize: '16px', cursor: 'pointer'}} onClick={()=>{commentList(record,index)}}>\r\n          <MessageOutlined />\r\n          <span className='margin-left-10'>{record.replyCommentList.length}</span>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime'\r\n    },\r\n    {\r\n      title: '评论状态',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'status',\r\n      render: (text:string, record:any) => (\r\n        <Switch checkedChildren=\"启用\" unCheckedChildren=\"禁用\" checked={text === '1'} onChange={()=>{statusChange(record)}} />\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      width: 220,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n          <Space>\r\n            {\r\n              userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')?\r\n              <Button type='primary' onClick={()=>editComment(record)}>编辑</Button>:''\r\n            }\r\n            {\r\n              userInfo.roleId.functionList.includes('5e834f61fb69305aa091e829')?\r\n              <Button type=\"primary\" danger onClick={()=>commentDel(record._id)}>删除</Button>:''\r\n            }\r\n            {\r\n              userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')?\r\n              <Button className={record.isTop?'custom-button-warning':'custom-button-info'}  onClick={()=>commentTop(record)}>置顶</Button>:''\r\n            }\r\n          </Space>\r\n      )\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    if(state){\r\n      setArticleId(state.articleId)\r\n      setArticleTitle(state.articleTitle)\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n  }, [articleId]);\r\n\r\n  \r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    if(!articleId){\r\n      return\r\n    }\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.article.commentList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      articleId,\r\n      status: formModel.status,\r\n      createTime: formModel.createTime?currentSelectTime(formModel.createTime[0])+','+currentSelectTime(formModel.createTime[1]):null,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取文章列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // 状态修改\r\n  const statusChange = (row:any)=>{\r\n    if(userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')){\r\n      let info = row.status === \"1\" ? \"禁用\" : \"启用\"\r\n      confirm({\r\n        title: '提示',\r\n        content: `此操作将${info}评论, 是否继续?`,\r\n        closable: true,\r\n        onOk() {\r\n          return new Promise((resolve, reject) => {\r\n            api.article.commentUpdate({\r\n              commentId: row._id,\r\n              status: row.status === '1'?'0':'1'\r\n            }).then((res)=>{\r\n              let code = res.data.code;\r\n              resolve('')\r\n              if(code === constantData.reqSuccess){\r\n                getDataList()\r\n              }else{\r\n                message.warning('评论状态修改失败');\r\n              }\r\n            })\r\n          }).catch(() => {});\r\n        }\r\n      });\r\n    }else{\r\n      message.warning('暂无权限修改状态')\r\n    }\r\n  }\r\n  // 评论内容变化\r\n  const textChange = (e:any)=>{\r\n    setCommentValue(e.target.value)\r\n  }\r\n  // 评论增删改\r\n  const commentAdd = ()=>{\r\n    commentObj.title = '新增评论';\r\n    commentObj.content = '请输入评论内容:';\r\n    commentObj.type = 'add';\r\n    commentObj.modal = true;\r\n    setCommentValue('')\r\n    setCommentObj({...commentObj})\r\n  }\r\n  const editComment = (row:any)=>{\r\n    commentObj.title = '编辑评论';\r\n    commentObj.content = '请编辑评论内容:';\r\n    commentObj.type = 'edit';\r\n    commentObj.selectRow = row;\r\n    commentObj.modal = true;\r\n    setCommentValue(row.content)\r\n    setCommentObj({...commentObj})\r\n  }\r\n  const commentConfir = ()=>{\r\n    if(!commentValue){\r\n      message.warning('评论内容不为空');\r\n    }\r\n    commentObj.loading = true;\r\n    setCommentObj({...commentObj})\r\n    if(commentObj.type === 'add'){\r\n      // 增加一级评论\r\n      api.article.commentAdd({\r\n        articleId,\r\n        content: commentValue,\r\n        status: '1'\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          commentObj.modal = false;\r\n          commentObj.loading = false;\r\n          setCommentObj({...commentObj})\r\n          getDataList()\r\n        }else{\r\n          message.warning('新增评论失败');\r\n        }\r\n      })\r\n    }else if(commentObj.type === 'edit'){\r\n      // 编辑一级评论\r\n      api.article.commentUpdate({\r\n        commentId: commentObj.selectRow._id,\r\n        content: commentValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          commentObj.modal = false;\r\n          commentObj.loading = false;\r\n          setCommentObj({...commentObj})\r\n          getDataList()\r\n        }else{\r\n          message.warning('编辑评论失败');\r\n        }\r\n      })\r\n    }else if(commentObj.type === 'addReply'){\r\n      let toUser = replayCommentObj.selectRow.createUser._id\r\n      api.article.replyCommentAdd({\r\n        articleId,\r\n        commentId: replayCommentObj.selectRow._id,\r\n        toUser,\r\n        content: commentValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          replayCommentObj.selectRow = res.data.data\r\n          tableData[replayCommentObj.index] = res.data.data\r\n          commentObj.modal = false;\r\n          commentObj.loading = false;\r\n          setCommentObj({...commentObj})\r\n          setReplayCommentObj({...replayCommentObj})\r\n          setTableData([...tableData])\r\n        }else{\r\n          message.warning('新增回复评论失败')\r\n        }\r\n      })\r\n    }else if(commentObj.type === 'editReply'){\r\n      api.article.replyCommentUpdate({\r\n        replayId: replayCommentObj.replyItem._id,\r\n        content: commentValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          replayCommentObj.selectRow.replyCommentList[replayCommentObj.replyIndex].content = commentValue\r\n          tableData[replayCommentObj.index] = replayCommentObj.selectRow\r\n          commentObj.modal = false;\r\n          commentObj.loading = false;\r\n          setCommentObj({...commentObj})\r\n          setReplayCommentObj({...replayCommentObj})\r\n          setTableData([...tableData])\r\n        }else{\r\n          message.warning('编辑回复评论失败');\r\n        }\r\n      })\r\n    }else if(commentObj.type === 'reply'){\r\n      api.article.replyCommentAdd({\r\n        articleId,\r\n        commentId: replayCommentObj.selectRow._id,\r\n        toUser: replayCommentObj.replyItem.replyUser._id,\r\n        content: commentValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          replayCommentObj.selectRow = res.data.data\r\n          tableData[replayCommentObj.index] = res.data.data\r\n          commentObj.modal = false;\r\n          commentObj.loading = false;\r\n          setCommentObj({...commentObj})\r\n          setReplayCommentObj({...replayCommentObj})\r\n          setTableData([...tableData])\r\n        }else{\r\n          message.warning('新增回复评论失败')\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const commentDel = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将永久删除该评论以及其回复评论, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.commentDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('评论删除成功');\r\n            }else if(code === constantData.dataAlready){\r\n              message.warning('请先删除已启用的回复评论')\r\n            }else{\r\n              message.warning('评论删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  const commentCancel = ()=>{\r\n    commentObj.modal = false;\r\n    setCommentValue('')\r\n    setCommentObj({...commentObj})\r\n  }\r\n  // 置顶\r\n  const commentTop = (row:any)=>{\r\n    let content = row.isTop?'是否确定取消该评论置顶？':'是否确定置顶该评论？'\r\n    confirm({\r\n      title: '提示',\r\n      content,\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.commentTop({\r\n            commentId: row._id,\r\n            isTop: !row.isTop\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('评论置顶状态修改成功');\r\n            }else{\r\n              message.warning('评论置顶状态修改失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 打开回复评论\r\n  const commentList = (row:any, index:number)=>{\r\n    replayCommentObj.selectRow = row;\r\n    replayCommentObj.index = index;\r\n    replayCommentObj.modal = true;\r\n    setReplayCommentObj({...replayCommentObj})\r\n  }\r\n  // 新增回复评论\r\n  const replyCommentAdd = ()=>{\r\n    if(userInfo.roleId.functionList.includes('5e834f6ffb69305aa091e82a')){\r\n      commentObj.title = '新增回复评论';\r\n      commentObj.content = `回复 @${replayCommentObj.selectRow.createUser.name}:`;\r\n      commentObj.type = 'addReply';\r\n      commentObj.modal = true;\r\n      setCommentValue('')\r\n      setCommentObj({...commentObj})\r\n    }else{\r\n      message.warning('暂无权限添加回复评论');\r\n    }\r\n  }\r\n  // 回复评论关闭\r\n  const replyCommentCancel = ()=>{\r\n    replayCommentObj.modal = false;\r\n    setReplayCommentObj({...replayCommentObj})\r\n  }\r\n  // 回复评论状态改变\r\n  const replyCommentStatus = (item:any, index:number)=>{\r\n    let content = item.status === '1'?'是否确定禁用该回复评论？':'是否确定启用该回复评论？'\r\n    confirm({\r\n      title: '提示',\r\n      content,\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.replyCommentUpdate({\r\n            replayId: item._id,\r\n            status: item.status === '1'?'0':'1'\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              replayCommentObj.selectRow.replyCommentList[index].status = res.data.data.status\r\n              tableData[replayCommentObj.index] = replayCommentObj.selectRow\r\n              setReplayCommentObj({...replayCommentObj})\r\n              setTableData([...tableData])\r\n            }else{\r\n              message.warning('评论状态修改失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 回复评论编辑\r\n  const replyCommentEdit = (item:any, index:number)=>{\r\n    replayCommentObj.replyItem = item;\r\n    replayCommentObj.replyIndex = index;\r\n    commentObj.title = '编辑回复评论';\r\n    commentObj.content = `编辑回复评论内容:`;\r\n    commentObj.type = 'editReply';\r\n    commentObj.modal = true;\r\n    setCommentValue(item.content)\r\n    setCommentObj({...commentObj})\r\n    setReplayCommentObj({...replayCommentObj})\r\n  }\r\n  // 回复评论回复\r\n  const replyComment = (item:any, index:number)=>{\r\n    replayCommentObj.replyItem = item;\r\n    replayCommentObj.replyIndex = index;\r\n    commentObj.title = '新增回复评论';\r\n    commentObj.content = `回复 @${item.replyUser.name}:`;\r\n    commentObj.type = 'reply';\r\n    commentObj.modal = true;\r\n    setCommentValue('')\r\n    setCommentObj({...commentObj})\r\n    setReplayCommentObj({...replayCommentObj})\r\n  }\r\n  // 回复评论删除\r\n  const replyCommentDel = (item:any, index:number)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将删除其回复评论, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.article.replyCommentDel(item._id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              replayCommentObj.selectRow = res.data.data\r\n              tableData[replayCommentObj.index] = res.data.data\r\n              setReplayCommentObj({...replayCommentObj})\r\n              setTableData([...tableData])\r\n              message.success('回复评论删除成功')\r\n            }else{\r\n              message.warning('回复评论删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n\r\n  return <div className='article-comment'>\r\n     <h2 className='content-title'>文章评论{articleTitle?'——'+articleTitle:''}</h2>\r\n     <div className=\"box-table\">\r\n      <Form\r\n         layout='inline'\r\n         form={searchForm}\r\n       >\r\n         <Form.Item label=\"评论状态\" name='status' className='margin-bottom-20'>\r\n            <Select allowClear={true} style={{width: '180px'}} placeholder=\"评论状态\" onChange={()=>{getDataList()}}>\r\n              <Select.Option value='0'>禁用</Select.Option>\r\n              <Select.Option value='1'>正常</Select.Option>\r\n            </Select>\r\n         </Form.Item>\r\n         <Form.Item label=\"创建时间\" name='createTime' className='margin-bottom-20'>\r\n            <RangePicker onChange={()=>{getDataList()}} />\r\n         </Form.Item>\r\n         <Form.Item className='margin-left-30 margin-bottom-20'>\r\n            {\r\n              userInfo.roleId.functionList.includes('5e834f6ffb69305aa091e82a')?<Button type=\"primary\" onClick={commentAdd}>新增</Button>:''\r\n            }\r\n         </Form.Item>\r\n       </Form>\r\n       <div className=\"table-show\">\r\n       <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n         total: pageObj.total,\r\n         showTotal: ()=>`共 ${pageObj.total} 条`,\r\n         current: pageObj.currentPage,\r\n         pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n       </div>\r\n     </div>\r\n     <Modal title='评论回复' width={720} confirmLoading={replayCommentObj.loading} visible={replayCommentObj.modal} onOk={replyCommentAdd} onCancel={replyCommentCancel} okText='新增'>\r\n     <div className=\"comment-box\">\r\n       {\r\n         replayCommentObj.selectRow.replyCommentList && replayCommentObj.selectRow.replyCommentList.length === 0?<Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />:''\r\n       }\r\n        <div className=\"box-list\">\r\n          {\r\n            replayCommentObj.selectRow.replyCommentList?replayCommentObj.selectRow.replyCommentList.map((item:any, index:number)=>{\r\n              return <div className=\"list-item\" key={item._id}>\r\n                {item.replyUser.avatarId?<Avatar size={40} src={`${baseURL}/file/down?downId=${item.replyUser.avatarId}`} />:<Avatar size={40} icon={<UserOutlined />} />}\r\n                <div className=\"item-content\">\r\n                  <div className=\"content-operate\">\r\n                    <div className=\"operate-user\">\r\n                      <span className='user-name'>{item.replyUser?item.replyUser.name:'--'}</span>\r\n                      <span className='comment-time'><ClockCircleOutlined style={{color:'#606266',marginRight: '3px',marginLeft: '4px'}} />{item.createTime}</span>\r\n                    </div>\r\n                    <div className=\"operate-data\">\r\n                      <Space size='middle'>\r\n                        {\r\n                          userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')?\r\n                          <Button size='small' onClick={()=>{replyCommentStatus(item,index)}} icon={item.status === '1'?<CloseCircleOutlined />:<CheckCircleOutlined />} className={item.status === '1'?'custom-button-info':'custom-button-success'}>{item.status === '1'?'禁用':'启用'}</Button>:''\r\n                        }\r\n                        {\r\n                          userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')?\r\n                          <Button size='small' onClick={()=>{replyCommentEdit(item,index)}} type='primary' icon={<EditOutlined />}>编辑</Button>:''\r\n                        }\r\n                        {\r\n                          userInfo.roleId.functionList.includes('5e834f77fb69305aa091e82b')?\r\n                          <Button size='small' onClick={()=>{replyComment(item,index)}} className='custom-button-warning' icon={<MessageOutlined />}>回复</Button>:''\r\n                        }\r\n                        {\r\n                          userInfo.roleId.functionList.includes('5e834f7efb69305aa091e82c')?\r\n                          <Button size='small' onClick={()=>{replyCommentDel(item,index)}} type=\"primary\" icon={<DeleteOutlined />} danger >删除</Button>:''\r\n                        }\r\n                      </Space>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content-replay\">\r\n                    {\r\n                      item.toUser && item.replyUser && item.toUser._id !==  item.replyUser._id?<span className='replay-user'>\r\n                        回复 <i>{item.toUser?item.toUser.name:'--'}</i> 的评论：\r\n                      </span>:''\r\n                    }\r\n                    <span>\r\n                      {item.content}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            }):''\r\n          }\r\n        </div>\r\n       </div>\r\n     </Modal> \r\n    <Modal title={commentObj.title} maskClosable={false} confirmLoading={commentObj.loading} visible={commentObj.modal} onOk={commentConfir} onCancel={commentCancel}>\r\n      <p className='margin-bottom-20'>{commentObj.content}</p>\r\n      <TextArea rows={3} maxLength={200} showCount={true} placeholder=\"评论内容\" value={commentValue} onChange={textChange} />\r\n    </Modal>    \r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(ArticleListComment)\r\n","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\articleTag\\index.tsx",["256"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\project\\index.tsx",["257"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, message, DatePicker, Space, Tabs, Table, Modal, Image, Radio, Upload, Progress } from 'antd';\r\nimport { UploadOutlined  } from '@ant-design/icons';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { baseURL } from \"@/api/axios\";\r\nimport moment from 'moment'\r\nimport { constantData, currentSelectTime } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\n\r\nconst Project = (props: any) => {\r\n  const { confirm } = Modal;\r\n  const { TabPane } = Tabs;\r\n  const { TextArea } = Input;\r\n  const [searchForm] = Form.useForm();\r\n  const [modalForm] = Form.useForm();\r\n  const { RangePicker } = DatePicker;\r\n  let userInfo = props.stateData.userInfo;\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [percent, setPercent] = useState(0);\r\n  let [sourceId, setSourceId] = useState('')\r\n  let [projectStatus, setProjectStatus] = useState('1')\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '项目名称',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '项目封面',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'imgId',\r\n      render: (text:string, record:any) => (\r\n        <Image\r\n          width={60}\r\n          src={`${baseURL}/file/down?downId=${text}`}\r\n          fallback=\"https://gw.alipayobjects.com/zos/rmsportal/sfjbOqnsXXJgNCjCzDBL.png\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: '项目描述',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'description',\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: '开始时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'startTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '结束时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'endTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space size='large'>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834f5afb69305aa091e828')?\r\n            <Button type='primary' onClick={()=>editProject(record)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834f61fb69305aa091e829')?\r\n            <Button type=\"primary\" onClick={()=>projectRemove(record._id)} danger>删除</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n  }, []);\r\n\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.project.projectList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      status: projectStatus,\r\n      name: formModel.name,\r\n      startTime: formModel.startTime?currentSelectTime(formModel.startTime[0])+','+currentSelectTime(formModel.startTime[1]):null,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取项目列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // tab切换\r\n   const tabsChange = (key:string)=>{\r\n    projectStatus = key\r\n    setProjectStatus(key)\r\n    getDataList()\r\n  }\r\n  // 项目删除\r\n  const projectRemove = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将删除该项目, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.project.projectDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('项目删除成功');\r\n            }else{\r\n              message.warning('项目删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 项目新增\r\n  const projectAdd = ()=>{\r\n    modalObj.title = '新增项目';\r\n    modalObj.selectRow = {};\r\n    modalForm.setFieldsValue({ \r\n      status: '2'\r\n    })\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 编辑打开弹框\r\n  const editProject = (row:any)=>{\r\n    modalForm.setFieldsValue({ \r\n      name: row.name,\r\n      startTime: row.startTime?moment(row.startTime,'YYYY-MM-DD'):'',\r\n      endTime: row.endTime?moment(row.endTime,'YYYY-MM-DD'):'',\r\n      status: row.status,\r\n      linkUrl: row.linkUrl,\r\n      description: row.description\r\n    })\r\n    modalObj.title = '编辑项目';\r\n    modalObj.selectRow = row;\r\n    modalObj.visible = true;\r\n    setSourceId(row.imgId)\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 新增或编辑提交\r\n  const modalConfir = ()=>{\r\n    modalForm.validateFields().then((values)=>{\r\n      modalObj.loading = true;\r\n      setModalObj({...modalObj})\r\n      if(modalObj.selectRow._id){\r\n        api.project.projectUpdate({\r\n          id: modalObj.selectRow._id,\r\n          name: values.name,\r\n          linkUrl: values.linkUrl,\r\n          status: values.status,\r\n          startTime: values.startTime?currentSelectTime(values.startTime):null,\r\n          endTime: values.endTime?currentSelectTime(values.endTime):null,\r\n          imgId: sourceId?sourceId:null,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n            message.success('项目信息更新成功');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('项目名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('项目信息更新失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else{\r\n        api.project.projectAdd({\r\n          name: values.name,\r\n          linkUrl: values.linkUrl,\r\n          status: values.status,\r\n          startTime: values.startTime?currentSelectTime(values.startTime):null,\r\n          endTime: values.endTime?currentSelectTime(values.endTime):null,\r\n          imgId: sourceId?sourceId:null,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n            modalForm.resetFields();\r\n            message.success('项目信息添加成功');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('项目名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('项目信息添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n  // 关闭弹框\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    setSourceId('')\r\n    modalForm.resetFields();\r\n    setModalObj({...modalObj})\r\n  }\r\n\r\n  // 开始时间禁用\r\n  const startTimeDisable = (currentDate: any)=>{\r\n    let endTime = modalForm.getFieldValue('endTime');\r\n    if(!currentDate || !endTime){\r\n      return currentDate.valueOf() > new Date().getTime();\r\n    }\r\n    return endTime <= currentDate.valueOf();\r\n  }\r\n  // 结束时间禁用\r\n  const endTimeDisable = (currentDate: any)=>{\r\n    let startTime = modalForm.getFieldValue('startTime');\r\n    if (!currentDate || !startTime) {\r\n      return currentDate.valueOf() < new Date().getTime();\r\n    }\r\n    return currentDate.valueOf() <= startTime\r\n  }\r\n  // 项目封面上传\r\n  const imgUploadProps = {\r\n    accept: 'image/*',\r\n    showUploadList: false,\r\n    transformFile: (file: any)=>{\r\n      return file\r\n    },\r\n    beforeUpload: (file: any) => {\r\n      if(file.size >  1048576){\r\n        let sizeLimit = 1048576/1024/1024\r\n        message.warning(`大小限制在${sizeLimit}Mb以内`)\r\n        return false\r\n      }\r\n      setPercent(0)\r\n      let fd = new FormData()\r\n      fd.append('file', file)\r\n      api.upload.uploadFile(fd,(upload:any)=>{\r\n        let complete = (upload.loaded / upload.total * 100 | 0)\r\n        setPercent(complete)\r\n        if(complete === 100){\r\n          setTimeout(()=>{\r\n            setPercent(0)\r\n          },1000)\r\n        }\r\n      }).then((res) => {\r\n        let code = res.data.code\r\n        if(code === constantData.reqSuccess){\r\n          let fileData = res.data.data\r\n          setSourceId(fileData.sourceId)\r\n        }else{\r\n          setPercent(0)\r\n          message.warning('文件上传失败');\r\n        }\r\n      })\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return <div className='project-wrapper'>\r\n    <h2 className='content-title'>项目管理</h2>\r\n    <div className=\"box-table\">\r\n      <Form\r\n        layout='inline'\r\n        form={searchForm}\r\n      >\r\n        <Form.Item label=\"项目名称\" name='name' className='margin-bottom-20'>\r\n           <Input \r\n            maxLength={20} \r\n            allowClear={true}\r\n            onBlur={()=>{getDataList()}} \r\n            placeholder=\"项目名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item label=\"时间范围\" name='startTime' className='margin-bottom-20'>\r\n           <RangePicker onChange={()=>{getDataList()}} />\r\n        </Form.Item>\r\n        <Form.Item className='margin-left-30 margin-bottom-20'>\r\n           {\r\n             userInfo.roleId.functionList.includes('5e834f88fb69305aa091e82d')?<Button type=\"primary\" onClick={projectAdd}>新增</Button>:''\r\n           }\r\n        </Form.Item>\r\n      </Form>\r\n      <Tabs defaultActiveKey={projectStatus} size='large' onChange={tabsChange}>\r\n        <TabPane tab=\"已完成\" key=\"1\">\r\n        </TabPane>\r\n        <TabPane tab=\"进行中\" key=\"2\">\r\n        </TabPane>\r\n        <TabPane tab=\"已废弃\" key=\"3\">\r\n        </TabPane>\r\n      </Tabs>\r\n      <div className=\"table-show\">\r\n        <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n          total: pageObj.total,\r\n          showTotal: ()=>`共 ${pageObj.total} 条`,\r\n          current: pageObj.currentPage,\r\n          pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n      </div>\r\n    </div>\r\n    <Modal title={modalObj.title} maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n    <Form\r\n        form={modalForm}\r\n        validateTrigger='onBlur'\r\n        requiredMark={false}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"项目名称\"\r\n          rules={FormValidate({name: '项目名称'})}\r\n        >\r\n          <Input \r\n            maxLength={20} \r\n            allowClear={true} \r\n            placeholder=\"项目名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"linkUrl\"\r\n          label=\"项目地址\"\r\n          rules={FormValidate({name: '项目地址'})}\r\n        >\r\n          <Input \r\n            allowClear={true} \r\n            placeholder=\"项目地址\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"startTime\"\r\n          label=\"开始时间\"\r\n          validateTrigger='onChange'\r\n          rules={FormValidate({type: 'array', name: '开始时间'})}\r\n        >\r\n          <DatePicker disabledDate={startTimeDisable} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"endTime\"\r\n          label=\"结束时间\"\r\n        >\r\n          <DatePicker disabledDate={endTimeDisable} />\r\n        </Form.Item>\r\n        <Form.Item \r\n          name=\"status\" \r\n          label=\"项目状态\"\r\n        >\r\n          <Radio.Group>\r\n            <Radio value=\"2\">进行中</Radio>\r\n            <Radio value=\"1\">已完成</Radio>\r\n            <Radio value=\"3\">已废弃</Radio>\r\n          </Radio.Group>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"upload\"\r\n          label=\"项目封面\"\r\n        >\r\n          <div className=\"upload-box\">\r\n            <Upload  {...imgUploadProps}>\r\n              {sourceId?<Image\r\n                width={120}\r\n                height={120}\r\n                preview={false}\r\n                style={{borderRadius: '4px'}}\r\n                src={`${baseURL}/file/down?downId=${sourceId}`}\r\n              />:<Button type=\"primary\" icon={<UploadOutlined />}>上传</Button>}\r\n              {\r\n                percent === 0?'': <Progress\r\n                  strokeColor={{\r\n                    '0%': '#108ee9',\r\n                    '100%': '#87d068',\r\n                  }}\r\n                  percent={percent}\r\n                />\r\n              }\r\n            </Upload>\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"项目描述\"\r\n          rules={FormValidate({name: '项目描述'})}\r\n        >\r\n           <TextArea rows={3} maxLength={200} allowClear={true} placeholder=\"项目描述\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(Project)\r\n",["258","259"],"F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\link\\index.tsx",["260"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, message, Space, Table, Modal } from 'antd';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { constantData } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\nimport InputColor from 'react-input-color';\r\n\r\nconst Link = (props: any) => {\r\n  const { confirm } = Modal;\r\n  const [searchForm] = Form.useForm();\r\n  const [modalForm] = Form.useForm();\r\n  let userInfo = props.stateData.userInfo;\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [initialColor, setInitialColor] = useState('#5e72e4')\r\n  let [selectColor, setSelectColor] = useState<any>({})\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '链接名称',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '链接地址',\r\n      align: 'center' as 'center',\r\n      ellipsis: true,\r\n      dataIndex: 'linkAddress',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '链接颜色',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'color',\r\n      render: (text:string, record:any) => (\r\n        <div style={{width: '120px', height: '20px', margin: '0 auto', backgroundColor: text}}>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime'\r\n    },\r\n    {\r\n      title: '操作',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space size='large'>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834faffb69305aa091e831')?\r\n            <Button type='primary' onClick={()=>editLink(record)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834fb5fb69305aa091e832')?\r\n            <Button type=\"primary\" onClick={()=>linkRemove(record._id)} danger>删除</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n  }, []);\r\n\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.link.linkList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      name: formModel.name,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取链接列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // 友情链接删除\r\n  const linkRemove = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将删除该友情链接, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.link.linkDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('友情链接删除成功');\r\n            }else{\r\n              message.warning('友情链接删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 友情链接新增\r\n  const linkAdd = ()=>{\r\n    modalObj.title = '新增友情链接';\r\n    modalObj.selectRow = {};\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 编辑打开弹框\r\n  const editLink = (row:any)=>{\r\n    modalObj.title = '编辑友情链接';\r\n    modalObj.selectRow = row;\r\n    modalObj.visible = true;\r\n    modalForm.setFieldsValue({ \r\n      name: row.name,\r\n      linkAddress: row.linkAddress\r\n    })\r\n    setInitialColor(row.color)\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 新增或编辑提交\r\n  const modalConfir = ()=>{\r\n    modalForm.validateFields().then((values)=>{\r\n      modalObj.loading = true;\r\n      setModalObj({...modalObj})\r\n      if(modalObj.selectRow._id){\r\n        api.link.linkUpdate({\r\n          id: modalObj.selectRow._id,\r\n          name: values.name,\r\n          linkAddress: values.linkAddress,\r\n          color: selectColor.hex || initialColor\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n            message.success('友情链接信息更新成功');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('友情链接名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('友情链接信息更新失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else{\r\n        api.link.linkAdd({\r\n          name: values.name,\r\n          linkAddress: values.linkAddress,\r\n          color: selectColor.hex || initialColor\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n            modalForm.resetFields();\r\n            message.success('友情链接信息添加成功');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('友情链接名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('友情链接信息添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n  // 关闭弹框\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    setInitialColor('#5e72e4')\r\n    modalForm.resetFields();\r\n    setModalObj({...modalObj})\r\n  }\r\n\r\n  return <div className='link-wrapper'>\r\n    <h2 className='content-title'>友情链接管理</h2>\r\n    <div className=\"box-table\">\r\n      <Form\r\n        layout='inline'\r\n        form={searchForm}\r\n      >\r\n        <Form.Item label=\"链接名称\" name='name' className='margin-bottom-20'>\r\n           <Input \r\n            maxLength={20} \r\n            allowClear={true}\r\n            onBlur={()=>{getDataList()}} \r\n            placeholder=\"链接名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item className='margin-left-30 margin-bottom-20'>\r\n           {\r\n             userInfo.roleId.functionList.includes('5e834f9efb69305aa091e830')?<Button type=\"primary\" onClick={linkAdd}>新增</Button>:''\r\n           }\r\n        </Form.Item>\r\n      </Form>\r\n      <div className=\"table-show\">\r\n        <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n          total: pageObj.total,\r\n          showTotal: ()=>`共 ${pageObj.total} 条`,\r\n          current: pageObj.currentPage,\r\n          pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n      </div>\r\n    </div>\r\n    <Modal className='modal-height' title={modalObj.title}  maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n    <Form\r\n        form={modalForm}\r\n        validateTrigger='onBlur'\r\n        requiredMark={false}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"链接名称\"\r\n          rules={FormValidate({name: '链接名称'})}\r\n        >\r\n          <Input \r\n            maxLength={20} \r\n            allowClear={true} \r\n            placeholder=\"链接名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"linkAddress\"\r\n          label=\"链接地址\"\r\n          rules={FormValidate({name: '链接地址'})}\r\n        >\r\n          <Input  \r\n            allowClear={true} \r\n            placeholder=\"链接地址\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"color\"\r\n          label=\"链接颜色\"\r\n        >\r\n          <InputColor initialValue={initialColor} onChange={setSelectColor} />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(Link)\r\n","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\message\\index.tsx",["261"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, message, DatePicker, Space, Table, Modal} from 'antd';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { constantData, currentSelectTime } from '@/utils/utils';\r\n\r\nconst MessageList = (props: any) => {\r\n  const { confirm } = Modal;\r\n  const { TextArea } = Input;\r\n  const [searchForm] = Form.useForm();\r\n  const { RangePicker } = DatePicker;\r\n  let userInfo = props.stateData.userInfo;\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [messageValue, setMessageValue] = useState('')\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    content: '',\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '留言用户',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createUser?record.createUser.name:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '留言内容',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'content',\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: '留言时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '留言状态',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'status',\r\n      render: (text:string, record:any) => (\r\n        <span style={{color: text === '1'?'#02BB00':'#909399'}}>\r\n          {text === '1'?'启用':'禁用'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space size='large'>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834fc4fb69305aa091e834')?\r\n            <Button className={record.status === '1'?'custom-button-info':'custom-button-success'} onClick={()=>statusChange(record)}>{record.status === '1'?'禁用':'启用'}</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834fc4fb69305aa091e834')?\r\n            <Button type='primary' onClick={()=>editMessage(record)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e834fcbfb69305aa091e835')?\r\n            <Button type=\"primary\" onClick={()=>messageRemove(record._id)} danger>删除</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n  }, []);\r\n\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.message.messageList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      createTime: formModel.createTime?currentSelectTime(formModel.createTime[0])+','+currentSelectTime(formModel.createTime[1]):null,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取留言列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // 留言删除\r\n  const messageRemove = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将删除该留言, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.message.messageDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n              message.success('留言删除成功');\r\n            }else{\r\n              message.warning('留言删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 状态修改\r\n  const statusChange = (row:any)=>{\r\n    let info = row.status === \"1\" ? \"是否确定禁用该留言？\" : \"是否确定启用该留言？\"\r\n    confirm({\r\n      title: '提示',\r\n      content: info,\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.message.messageUpdate({\r\n            id: row._id,\r\n            status: row.status === '1'?'0':'1'\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList()\r\n            }else{\r\n              message.warning('留言状态修改失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 留言内容变化\r\n  const textChange = (e:any)=>{\r\n    setMessageValue(e.target.value)\r\n  }\r\n  // 留言新增\r\n  const messageAdd = ()=>{\r\n    modalObj.title = '新增留言';\r\n    modalObj.content = '请输入留言内容';\r\n    modalObj.selectRow = {};\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 编辑打开弹框\r\n  const editMessage = (row:any)=>{\r\n    modalObj.title = '编辑留言';\r\n    modalObj.content = '请编辑留言内容';\r\n    modalObj.selectRow = row;\r\n    modalObj.visible = true;\r\n    setMessageValue(row.content)\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 新增或编辑提交\r\n  const modalConfir = ()=>{\r\n    if(!messageValue){\r\n      return message.warning('评论内容不能为空')\r\n    }\r\n    modalObj.loading = true;\r\n    setModalObj({...modalObj})\r\n    if(modalObj.selectRow._id){\r\n      api.message.messageUpdate({\r\n        id: modalObj.selectRow._id,\r\n        content: messageValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        modalObj.loading = false;\r\n        if(code === constantData.reqSuccess){\r\n          modalObj.visible = false;\r\n          getDataList();\r\n          message.success('留言信息更新成功');\r\n        }else{\r\n          message.warning('留言信息更新失败');\r\n        }\r\n        setModalObj({...modalObj})\r\n      })\r\n    }else{\r\n      api.message.messageAdd({\r\n        status: '1',\r\n        content: messageValue\r\n      }).then((res)=>{\r\n        let code = res.data.code\r\n        modalObj.loading = false;\r\n        if(code === constantData.reqSuccess){\r\n          modalObj.visible = false;\r\n          getDataList();\r\n          message.success('留言信息添加成功');\r\n        }else{\r\n          message.warning('留言信息添加失败');\r\n        }\r\n        setModalObj({...modalObj})\r\n      })\r\n    }\r\n  }\r\n  // 关闭弹框\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    setMessageValue('')\r\n    setModalObj({...modalObj})\r\n  }\r\n\r\n  return <div className='message-wrapper'>\r\n    <h2 className='content-title'>留言管理</h2>\r\n    <div className=\"box-table\">\r\n      <Form\r\n        layout='inline'\r\n        form={searchForm}\r\n      >\r\n        <Form.Item label=\"时间范围\" name='createTime' className='margin-bottom-20'>\r\n           <RangePicker onChange={()=>{getDataList()}} />\r\n        </Form.Item>\r\n        <Form.Item className='margin-left-30 margin-bottom-20'>\r\n           {\r\n             userInfo.roleId.functionList.includes('5e834fbdfb69305aa091e833')?<Button type=\"primary\" onClick={messageAdd}>新增</Button>:''\r\n           }\r\n        </Form.Item>\r\n      </Form>\r\n      <div className=\"table-show\">\r\n        <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n          total: pageObj.total,\r\n          showTotal: ()=>`共 ${pageObj.total} 条`,\r\n          current: pageObj.currentPage,\r\n          pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n      </div>\r\n    </div>\r\n    <Modal title={modalObj.title} maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n    <p className='margin-bottom-20'>{modalObj.content}</p>\r\n    <TextArea rows={3} maxLength={200} showCount={true} placeholder=\"评论内容\" value={messageValue} onChange={textChange} />\r\n    </Modal>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(MessageList)\r\n","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\menu\\index.tsx",["262","263","264","265","266","267","268","269"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, message, Table, Modal, Tree, TreeSelect, Tabs} from 'antd';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { constantData } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\nimport './index.scss'\r\n\r\nconst MenuList = (props: any) => {\r\n  const { confirm } = Modal;\r\n  const { TabPane } = Tabs;\r\n  const [modalForm] = Form.useForm();\r\n  let userInfo = props.stateData.userInfo;\r\n  let [treeData, setTreeData] = useState<any[]>([])\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [modalTreeData, setModalTreeData] = useState<any[]>([])\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    operType: '',\r\n    visible: false,\r\n    loading: false,\r\n    treeDisabled: false,\r\n    selectRow: {}\r\n  })\r\n  let tableColumns = [\r\n    {\r\n      title: '名称',\r\n      className: 'font-16',\r\n      dataIndex: 'title'\r\n    },\r\n    {\r\n      title: '类别',\r\n      width: '260px',\r\n      className: 'font-16',\r\n      dataIndex: 'menuId',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text?'功能':'菜单'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      width: '260px',\r\n      className: 'font-16',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) =>(\r\n        <div className=\"node-box\">\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99c280d1ba729a78b016bd') && record.parentId != \"0\"?<div className=\"box-btn\" onClick={(e)=>{\r\n              editData(record,e)\r\n            }}>编辑</div>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99c287d1ba729a78b016be') && record.parentId != \"0\"?<div className=\"box-btn btn-del\" onClick={(e)=>{\r\n              delData(record,e)\r\n            }}>删除</div>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99c25ad1ba729a78b016bc') && ((!record.children && !record.menuId) || (record.functionList && record.functionList.length) > 0)?<div className=\"box-btn btn-add\" onClick={(e)=>{addFunction(record,e)}}>新增功能</div>:''\r\n          }\r\n        </div>\r\n      )\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getTreeList()\r\n  }, []);\r\n\r\n  const getTreeList = ()=>{\r\n    api.menu.menuTree({}).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let treeList = res.data.data;\r\n        let modalTree = [];\r\n        let tableList = [];\r\n        if(treeList.length > 0){\r\n          modalTree = modalTreeHandle(treeList)\r\n          tableList = tableHandle(treeList)\r\n          treeList = treeHandle(treeList)\r\n        }\r\n        setModalTreeData([...modalTree])\r\n        setTableData([...tableList])\r\n        setTreeData([...treeList])\r\n      }else{\r\n        message.warning('获取菜单列表失败');\r\n      }\r\n    })\r\n  }\r\n  // 菜单新增\r\n  const menuAdd = ()=>{\r\n    modalObj.title = '新增菜单';\r\n    modalObj.operType = 'addMenu';\r\n    modalObj.treeDisabled = false;\r\n    modalObj.selectRow = {};\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  const modalConfir = ()=>{\r\n    modalForm.validateFields().then((values)=>{\r\n      if(modalObj.operType === 'editMenu' && values.menuId === modalObj.selectRow._id){\r\n        return message.warning('上级菜单不可选本身');\r\n      }\r\n      modalObj.loading = true;\r\n      setModalObj({...modalObj})\r\n      if(modalObj.operType === 'addMenu'){\r\n        api.menu.menuAdd({\r\n          title: values.title,\r\n          parentId: values.menuId,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getTreeList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('菜单标题已存在');\r\n            modalForm.setFieldsValue({ \r\n              title: ''\r\n            })\r\n          }else{\r\n            message.warning('菜单标题添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else if(modalObj.operType === 'editMenu'){\r\n        api.menu.menuUpdate({\r\n          id: modalObj.selectRow._id,\r\n          title: values.title,\r\n          parentId: values.menuId,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getTreeList();\r\n          }else if(code === constantData.statusFail){\r\n            message.warning('上级菜单不可选本身');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('菜单标题已存在');\r\n            modalForm.setFieldsValue({ \r\n              title: ''\r\n            })\r\n          }else{\r\n            message.warning('菜单标题编辑失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else if(modalObj.operType === 'addFunction'){\r\n        api.menu.functionAdd({\r\n          title: values.title,\r\n          menuId: values.menuId,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getTreeList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('功能标题已存在');\r\n            modalForm.setFieldsValue({ \r\n              title: ''\r\n            })\r\n          }else{\r\n            message.warning('功能标题添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else if(modalObj.operType === 'editFunction'){\r\n        api.menu.functionUpdate({\r\n          id: modalObj.selectRow._id,\r\n          title: values.title,\r\n          menuId: values.menuId,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            modalForm.resetFields();\r\n            getTreeList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('功能标题已存在');\r\n            modalForm.setFieldsValue({ \r\n              title: ''\r\n            })\r\n          }else{\r\n            message.warning('功能标题添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    modalForm.resetFields();\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 编辑数据\r\n  const editData = (item:any, e:any)=>{\r\n    e.stopPropagation()\r\n    if(item.menuId){\r\n      modalObj.title = '编辑功能';\r\n      modalObj.operType = 'editFunction';\r\n      modalObj.selectRow = item;\r\n      modalObj.treeDisabled = false;\r\n      modalObj.visible = true;\r\n      modalForm.setFieldsValue({ \r\n        title: item.aliasTitle || item.title,\r\n        menuId: item.menuId,\r\n        description: item.description\r\n      })\r\n    }else{\r\n      modalObj.title = '编辑菜单';\r\n      modalObj.operType = 'editMenu';\r\n      modalObj.selectRow = item;\r\n      modalObj.treeDisabled = false;\r\n      modalObj.visible = true;\r\n      modalForm.setFieldsValue({ \r\n        title: item.aliasTitle || item.title,\r\n        menuId: item.parentId,\r\n        description: item.description\r\n      })\r\n    }\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 新增功能\r\n  const addFunction = (item:any,e:any)=>{\r\n    e.stopPropagation()\r\n    modalObj.title = '新增功能';\r\n    modalObj.operType = 'addFunction';\r\n    modalObj.selectRow = item;\r\n    modalObj.treeDisabled = true;\r\n    modalObj.visible = true;\r\n    modalForm.setFieldsValue({ \r\n      title: '',\r\n      menuId: item._id,\r\n      description: ''\r\n    })\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 删除数据\r\n  const delData = (item:any, e:any)=>{\r\n    e.stopPropagation()\r\n    if(item.functionList && item.functionList.length > 0){\r\n      return message.warning('该菜单存在功能列表，请先删除功能')\r\n    }\r\n    let content = item.menuId?'此操作将删除该功能, 是否继续?':'此操作将删除该菜单, 是否继续?'\r\n    confirm({\r\n      title: '提示',\r\n      content,\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          if(item.menuId){\r\n            api.menu.functionDel(item._id).then((res)=>{\r\n              let code = res.data.code;\r\n              resolve('')\r\n              if(code === constantData.reqSuccess){\r\n                getTreeList();\r\n              }else{\r\n                message.warning('功能删除失败');\r\n              }\r\n            })\r\n          }else{\r\n            api.menu.menuDel(item._id).then((res)=>{\r\n              let code = res.data.code;\r\n              resolve('')\r\n              if(code === constantData.reqSuccess){\r\n                getTreeList();\r\n              }else if(code === constantData.dataAlready){\r\n                message.warning('该菜单存在功能列表，请先删除功能')\r\n              }else{\r\n                message.warning('菜单删除失败');\r\n              }\r\n            })\r\n          }\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 数据处理\r\n  const treeHandle = (arr:any[])=>{\r\n    arr.map((item:any)=>{\r\n      if(item.functionList && item.functionList.length > 0){\r\n        item.children = item.functionList\r\n      }\r\n      if (item.children && item.children.length > 0) {\r\n        item.children = treeHandle(item.children)\r\n      }\r\n      item.key = item._id;\r\n      item.aliasTitle = item.title;\r\n      item.title = (\r\n        <div className=\"tree-node\">\r\n          <div className=\"node-title\">\r\n            {item.menuId?<SettingOutlined style={{color: 'rgba(0, 0, 0,.4)'}} />:<i className='mio-icon-icon_caidan iconfont'></i>}\r\n            <span>{item.title}</span>\r\n          </div>\r\n          <div className=\"node-box\">\r\n            {item.menuId?\"功能\":\"菜单\"}\r\n          </div>\r\n          <div className=\"node-box\">\r\n            {\r\n              userInfo.roleId.functionList.includes('5e99c280d1ba729a78b016bd') && item.parentId != \"0\"?<div className=\"box-btn\" onClick={(e)=>{\r\n                editData(item,e)\r\n              }}>编辑</div>:''\r\n            }\r\n            {\r\n              userInfo.roleId.functionList.includes('5e99c287d1ba729a78b016be') && item.parentId != \"0\"?<div className=\"box-btn btn-del\" onClick={(e)=>{\r\n                delData(item,e)\r\n              }}>删除</div>:''\r\n            }\r\n            {\r\n              userInfo.roleId.functionList.includes('5e99c25ad1ba729a78b016bc') && ((!item.children && !item.menuId) || (item.functionList && item.functionList.length) > 0)?<div className=\"box-btn btn-add\" onClick={(e)=>{addFunction(item,e)}}>新增功能</div>:''\r\n            }\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n    return arr\r\n  }\r\n  const modalTreeHandle = (arr:any[])=>{\r\n    let newArr = JSON.parse(JSON.stringify(arr))\r\n    newArr.map((item:any)=>{\r\n      if (item.children && item.children.length > 0) {\r\n        item.children = modalTreeHandle(item.children)\r\n      }\r\n      item.value = item._id;\r\n    })\r\n    return newArr\r\n  }\r\n  const tableHandle = (arr:any[])=>{\r\n    let newArr = JSON.parse(JSON.stringify(arr))\r\n    newArr.map((item:any)=>{\r\n      if(item.functionList && item.functionList.length > 0){\r\n        item.children = item.functionList\r\n      }\r\n      if (item.children && item.children.length > 0) {\r\n        item.children = tableHandle(item.children)\r\n      }\r\n    })\r\n    return newArr\r\n  }\r\n\r\n  return <div className='menu-wrapper'>\r\n    <h2 className='content-title'>菜单管理</h2>\r\n    <div className=\"box-table\" style={{paddingTop: '4px'}}>\r\n      <Tabs defaultActiveKey=\"tree\" size='large' tabBarExtraContent={\r\n        userInfo.roleId.functionList.includes('5e99c25ad1ba729a78b016bc')?<Button type=\"primary\" onClick={menuAdd}>新增菜单</Button>:''\r\n      }>\r\n        <TabPane tab=\"树形结构\" key=\"tree\">\r\n        <div className=\"box-tree\">\r\n          <div className=\"list-header\">\r\n            <div className=\"header-title\">名称</div>\r\n            <div className=\"header-title\">类别</div>\r\n            <div className=\"header-title\">操作</div>\r\n          </div>\r\n          <div className=\"list-tree\">\r\n          {\r\n            treeData.length > 0 && <Tree\r\n              blockNode={true}\r\n              defaultExpandAll={true}\r\n              treeData={treeData}\r\n            />\r\n          }\r\n          </div>\r\n        </div>\r\n        </TabPane>\r\n        <TabPane tab=\"表格结构\" key=\"table\">\r\n          <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={false} expandable={\r\n            {\r\n              defaultExpandedRowKeys: tableData.length > 0?[tableData[0]._id]:[],\r\n              expandRowByClick: true\r\n            }\r\n          }  />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n    <Modal  title={modalObj.title} maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n    <Form\r\n        form={modalForm}\r\n        validateTrigger='onBlur'\r\n        labelCol={{ span: 4 }}\r\n        requiredMark={false}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"标题\"\r\n          rules={FormValidate({name: '标题'})}\r\n        >\r\n          <Input \r\n            maxLength={20} \r\n            allowClear={true} \r\n            placeholder=\"标题\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"menuId\"\r\n          label=\"上级菜单\"\r\n          validateTrigger='onChange'\r\n          rules={FormValidate({type: 'array',name: '上级菜单'})}\r\n        >\r\n          <TreeSelect\r\n            placeholder='上级菜单'\r\n            treeDefaultExpandAll={true}\r\n            disabled={modalObj.treeDisabled}\r\n            allowClear={true}\r\n            treeData={modalTreeData}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"描述\"\r\n        >\r\n          <Input \r\n            maxLength={80} \r\n            allowClear={true} \r\n            placeholder=\"描述\" \r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  </div>;\r\n}\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(MenuList)","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\user\\index.tsx",["270"],"import React, { useState, useEffect} from \"react\";\r\nimport { Form, Input, Button, message, Space, Table, Alert, Modal} from 'antd';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport ExportJsonExcel from 'js-export-excel';\r\nimport { constantData } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\nimport './index.scss'\r\n\r\nconst User = (props: any) => {\r\n  const { confirm } = Modal;\r\n  let userInfo = props.stateData.userInfo;\r\n  const [searchForm] = Form.useForm();\r\n  const [modalForm] = Form.useForm();\r\n  let [selectArr, setSelectArr] = useState<any[]>([])\r\n  let [selectedRowArr, setSelectedRowArr] = useState<string[]>([])\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    visible: false,\r\n    loading: false,\r\n    pwdHide: false,\r\n    selectRow: {}\r\n  })\r\n  let tableColumns = [\r\n    {\r\n      title: '用户名',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '邮箱',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'email'\r\n    },\r\n    {\r\n      title: '手机号码',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'phone',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '角色类型',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'roleId',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.roleId?record.roleId.name: '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createTime?record.createTime.split(' ')[0]:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '状态',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'status',\r\n      render: (text:string, record:any) => (\r\n        <span style={{color: text === '1'?'#02BB00':'#909399'}}>\r\n          {text === '1'?'启用':'禁用'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      width: 320,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e835039fb69305aa091e838')?\r\n            <Button className={record.status === '1'?'custom-button-info':'custom-button-success'} onClick={()=>updateStatus(record)}>{record.status === '1'?'禁用':'启用'}</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e835039fb69305aa091e838')?\r\n            <Button className='custom-button-warning' onClick={()=>resetPwd(record._id)}>重置密码</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e835039fb69305aa091e838')?\r\n            <Button type='primary' onClick={()=>userEdit(record)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e83503ffb69305aa091e839')?\r\n            <Button type=\"primary\" danger onClick={()=>userDel(record._id)}>删除</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    },\r\n  ]\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n  }, []);\r\n\r\n  // 修改用户状态\r\n  const updateStatus = (row:any)=>{\r\n    let info = row.status === \"1\" ? \"是否确定禁用该用户？\" : \"是否确定启用该用户？\"\r\n    confirm({\r\n      title: '提示',\r\n      content: info,\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.user.userUpdate({\r\n            id: row._id,\r\n            status: row.status === '1'?'0':'1'\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList()\r\n            }else{\r\n              message.warning('用户状态修改失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 重置密码\r\n  const resetPwd = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将重置该用户密码，是否继续？',\r\n      closable: true,\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.user.setPwd({\r\n            userId: id\r\n          }).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              message.success('密码重置成功，新密码为123456abc')\r\n            }else{\r\n              message.warning('密码重置失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 查询数据\r\n  const resetSearch = ()=>{\r\n    searchForm.resetFields();\r\n    getDataList()\r\n  }\r\n  // 用户操作\r\n  const userAdd = ()=>{\r\n    modalObj.title = '新增用户';\r\n    modalObj.selectRow = {};\r\n    modalObj.pwdHide = false;\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  const userEdit = (row:any)=>{\r\n    modalForm.setFieldsValue({ \r\n      name: row.name,\r\n      email: row.email,\r\n      phone: row.phone\r\n    })\r\n    modalObj.pwdHide = true;\r\n    modalObj.title = '编辑用户';\r\n    modalObj.selectRow = row;\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  const userDel = (id:string)=>{\r\n    confirm({\r\n      title: '提示',\r\n      content: '此操作将删除该用户信息, 是否继续?',\r\n      closable: true,\r\n      okType: 'danger',\r\n      onOk() {\r\n        return new Promise((resolve, reject) => {\r\n          api.user.userDel(id).then((res)=>{\r\n            let code = res.data.code;\r\n            resolve('')\r\n            if(code === constantData.reqSuccess){\r\n              getDataList();\r\n            }else{\r\n              message.warning('用户删除失败');\r\n            }\r\n          })\r\n        }).catch(() => {});\r\n      }\r\n    });\r\n  }\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.user.userList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      name: formModel.name,\r\n      phone: formModel.phone,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取用户列表失败');\r\n      }\r\n    })\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    clearSelect()\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  // 新增或编辑提交\r\n  const modalConfir = ()=>{\r\n    modalForm.validateFields().then((values)=>{\r\n      modalObj.loading = true;\r\n      setModalObj({...modalObj})\r\n      if(modalObj.selectRow._id){\r\n        api.user.userUpdate({\r\n          id: modalObj.selectRow._id,\r\n          name: values.name,\r\n          phone: values.phone,\r\n          email: values.email,\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('用户名已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else if(code === constantData.statusFail){\r\n            message.warning('邮箱已存在');\r\n            modalForm.setFieldsValue({ \r\n              email: ''\r\n            })\r\n          }else{\r\n            message.warning('用户信息更新失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else{\r\n        api.user.userAdd({\r\n          name: values.name,\r\n          password: values.password,\r\n          phone: values.phone,\r\n          email: values.email,\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            modalForm.resetFields();\r\n            getDataList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('用户名已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else if(code === constantData.statusFail){\r\n            message.warning('邮箱已存在');\r\n            modalForm.setFieldsValue({ \r\n              email: ''\r\n            })\r\n          }else{\r\n            message.warning('用户信息添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n  // 关闭弹框\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    modalForm.resetFields();\r\n    setModalObj({...modalObj})\r\n  }\r\n  const clearSelect = ()=>{\r\n    setSelectedRowArr([])\r\n    setSelectArr([])\r\n  }\r\n  // 导出所有\r\n  const exportAll = ()=>{\r\n    if(pageObj.total > 0){\r\n      confirm({\r\n        title: '提示',\r\n        content: `是否确认操作所有数据，数据总共 ${pageObj.total} 条`,\r\n        closable: true,\r\n        onOk() {\r\n          return new Promise((resolve, reject) => {\r\n            let formModel = searchForm.getFieldsValue();\r\n            let sortOrders = '';\r\n            if(sortObj.sortOrders){\r\n              if(sortObj.sortOrders === 'ascend'){\r\n                sortOrders = '1';\r\n              }else{\r\n                sortOrders = '0';\r\n              }\r\n            }\r\n            api.user.userList({\r\n              currentPage: '1',\r\n              pageSize: '9999',\r\n              name: formModel.name,\r\n              phone: formModel.phone,\r\n              sortBy: sortObj.sortBy,\r\n              sortOrders\r\n            }).then(res =>{\r\n              let code = res.data.code\r\n              resolve('')\r\n              if(code === constantData.reqSuccess){\r\n                exportData(res.data.data.data)\r\n              }else{\r\n                message.warning('导出用户列表失败');\r\n              }\r\n            })\r\n          }).catch(() => {});\r\n        }\r\n      });\r\n    }else{\r\n      message.warning('用户数据为空');\r\n    }\r\n  }\r\n  // 导出数据\r\n  const exportData = (arr?: any[])=>{\r\n    let newArr = arr?arr:selectArr\r\n    newArr.forEach(item=>{\r\n      item.roleType = item.roleId?item.roleId.name:'--';\r\n      item.userStatus = item.status === '1'?'启用':'禁用';\r\n    })\r\n    let option = {\r\n      fileName: 'userList',\r\n      datas: [\r\n        {\r\n          sheetData: newArr,\r\n          sheetName:'用户数据',\r\n          sheetFilter:['name','email','phone','roleType','createTime','userStatus'],\r\n          sheetHeader:['用户名','邮箱','手机号','角色类型','创建时间','用户状态']\r\n        }\r\n      ]\r\n    }\r\n    let toExcel = new ExportJsonExcel(option); \r\n    toExcel.saveExcel();\r\n    clearSelect()\r\n  }\r\n\r\n  return <div className='user-wrapper'>\r\n     <h2 className='content-title'>用户列表</h2>\r\n     <div className=\"box-table\">\r\n       <div className=\"search-from\">\r\n        <Form\r\n            layout='inline'\r\n            form={searchForm}\r\n          >\r\n            <Form.Item label=\"用户名\" name='name' className='margin-bottom-20'>\r\n               <Input \r\n                maxLength={20} \r\n                allowClear={true} \r\n                placeholder=\"用户名\" \r\n              />\r\n            </Form.Item>\r\n            <Form.Item label=\"手机号码\" name='phone' className='margin-bottom-20'>\r\n               <Input \r\n                maxLength={11} \r\n                allowClear={true} \r\n                placeholder=\"手机号码\" \r\n              />\r\n            </Form.Item> \r\n            <Form.Item className='margin-left-30 margin-bottom-20'>\r\n               <Space size='large'>\r\n                 <Button type=\"primary\" onClick={()=>getDataList()}>查询</Button>\r\n                 {\r\n                   userInfo.roleId.functionList.includes('5e7e06a80849b708d414da01')?<Button type=\"primary\" onClick={userAdd}>新增</Button>:''\r\n                 }\r\n                 <Button onClick={resetSearch}>重置</Button>\r\n               </Space>\r\n            </Form.Item>\r\n          </Form>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99c8a9d1ba729a78b016c1')?\r\n            <Space className='margin-bottom-20' size='large'>\r\n                <Button type='primary' onClick={exportAll}>导出所有</Button>\r\n                <Button type='primary' disabled={selectedRowArr.length === 0?true:false} onClick={()=>exportData()}>导出选中</Button>\r\n            </Space>:''\r\n          }\r\n       </div>\r\n       <div className=\"table-show\">\r\n        {\r\n          selectedRowArr.length > 0 && <Alert className='alert-desc' message={`已选择 ${selectedRowArr.length} 项`} closeText=\"清除所选\" showIcon={true} type=\"warning\" onClose={clearSelect} />\r\n        }\r\n       <Table \r\n        rowKey='_id'\r\n        columns={tableColumns} \r\n        dataSource={tableData} \r\n        pagination={{\r\n         total: pageObj.total,\r\n         showTotal: ()=>`共 ${pageObj.total} 条`,\r\n         current: pageObj.currentPage,\r\n         pageSize: pageObj.pageSize,\r\n        }} \r\n        rowSelection={{\r\n          selectedRowKeys: selectedRowArr,\r\n          onChange: (selectedRowKeys: any[], selectedRows: any[])=>{\r\n            setSelectedRowArr([...selectedRowKeys])\r\n            setSelectArr([...selectedRows])\r\n          }\r\n        }}\r\n        onChange={tableChange} />\r\n       </div>\r\n     </div>\r\n     <Modal title={modalObj.title} maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n     <Form\r\n         form={modalForm}\r\n         labelCol={{ span: 4 }}\r\n         validateTrigger='onBlur'\r\n         requiredMark={false}\r\n         scrollToFirstError\r\n       >\r\n         <Form.Item\r\n           name=\"name\"\r\n           label=\"用户名\"\r\n           rules={FormValidate({name: '用户名'})}\r\n         >\r\n           <Input \r\n             maxLength={30} \r\n             allowClear={true} \r\n             placeholder=\"用户名\" \r\n           />\r\n         </Form.Item>\r\n         <Form.Item\r\n           name=\"password\"\r\n           hidden={modalObj.pwdHide}\r\n           label=\"密码\"\r\n           rules={FormValidate({type:'password',name: '密码', require: !modalObj.pwdHide})}\r\n         >\r\n           <Input.Password \r\n             type=\"password\"\r\n             maxLength={16}\r\n             allowClear={true}\r\n             placeholder=\"密码\"\r\n           />\r\n         </Form.Item>\r\n         <Form.Item\r\n           name=\"confirPwd\"\r\n           hidden={modalObj.pwdHide}\r\n           label=\"确认密码\"\r\n           rules={[\r\n             {\r\n               required: !modalObj.pwdHide,\r\n               message: '请输入确认密码',\r\n             },\r\n             {\r\n               min: 6, max: 16, message: `字符长度为6-16个字符`\r\n             },\r\n             ({ getFieldValue }) => ({\r\n               validator(_, value) {\r\n                 if (!value || getFieldValue('password') === value || value.length < 6) {\r\n                   return Promise.resolve();\r\n                 }\r\n                 return Promise.reject('确认密码和密码不一致');\r\n               },\r\n             }),\r\n           ]}\r\n         >\r\n           <Input.Password \r\n             type=\"password\"\r\n             maxLength={16}\r\n             allowClear={true}\r\n             placeholder=\"确认密码\"\r\n           />\r\n         </Form.Item>\r\n         <Form.Item\r\n           name=\"email\"\r\n           label=\"邮箱\"\r\n           rules={FormValidate({type: 'email', name: '邮箱'})}\r\n         >\r\n           <Input \r\n             maxLength={40} \r\n             allowClear={true} \r\n             placeholder=\"邮箱\" \r\n           />\r\n         </Form.Item>\r\n         <Form.Item\r\n           name=\"phone\"\r\n           label=\"手机号码\"\r\n           rules={FormValidate({type: 'phone', name: '手机号', emptyBool: true})}\r\n         >\r\n           <Input \r\n             maxLength={11} \r\n             allowClear={true} \r\n             placeholder=\"手机号码（选填）\" \r\n           />\r\n         </Form.Item>\r\n       </Form>\r\n     </Modal>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(User)\r\n","F:\\project\\gitDemo\\react-admin-demos\\src\\pages\\role\\index.tsx",["271","272","273","274","275","276"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Button, message, Space, Table, Tree, Modal, Alert} from 'antd';\r\nimport { AudioOutlined } from '@ant-design/icons';\r\nimport { connect } from 'react-redux'\r\nimport { StoreState } from '@/store/types'\r\nimport api from '@/api/index';\r\nimport { constantData } from '@/utils/utils';\r\nimport { FormValidate } from '@/utils/format';\r\n\r\nconst Role = (props: any) => {\r\n  const { confirm } = Modal;\r\n  const { Search } = Input;\r\n  const [searchForm] = Form.useForm();\r\n  const [modalForm] = Form.useForm();\r\n  const { TextArea } = Input;\r\n  let userInfo = props.stateData.userInfo;\r\n  let [tableData, setTableData] = useState<any[]>([])\r\n  let [userTableData, setUserTableData] = useState<any[]>([])\r\n  let [treeData, setTreeData] = useState<any[]>([])\r\n  let [selectTreeArr, setSelectTreeArr] = useState<string[]>([])\r\n  let [selectedRowArr, setSelectedRowArr] = useState<string[]>([])\r\n  let [selectArr, setSelectArr] = useState<any[]>([])\r\n  let [modalObj, setModalObj] = useState<any>({\r\n    title: '',\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [userModal, setUserModal] = useState<any>({\r\n    type: '',\r\n    selectName: '',\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [modalAuth, setModalAuth] = useState<any>({\r\n    visible: false,\r\n    loading: false,\r\n    selectRow: {}\r\n  })\r\n  let [pageObj, setPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [userPageObj, setUserPageObj] = useState({\r\n    pageSize: 10,\r\n    total: 0,\r\n    currentPage: 1\r\n  })\r\n  let [sortObj, setSortObj] = useState({\r\n    sortBy: '',\r\n    sortOrders: ''\r\n  })\r\n\r\n  let tableColumns = [\r\n    {\r\n      title: '角色名称',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '角色描述',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'description',\r\n      ellipsis: true,\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '创建时间',\r\n      sorter: true,\r\n      align: 'center' as 'center',\r\n      dataIndex: 'createTime',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {record.createTime?record.createTime.split(' ')[0]:'--'}\r\n        </span>\r\n      )\r\n    },\r\n    {\r\n      title: '操作',\r\n      align: 'center' as 'center',\r\n      width: 520,\r\n      dataIndex: 'operate',\r\n      render: (text:string, record:any) => (\r\n        <Space size='large'>\r\n          {\r\n            userInfo.roleId.functionList.includes('5e835067fb69305aa091e83b')?\r\n            <Button type='primary' onClick={()=>editRole(record)}>编辑</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e83506dfb69305aa091e83c')?\r\n            <Button type=\"primary\" onClick={()=>roleRemove(record)} danger>删除</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99cb85d1ba729a78b016c2')?\r\n            <Button className='custom-button-warning' onClick={()=>authOpen(record)}>权限分配</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99cb85d1ba729a78b016c2')?\r\n            <Button className='custom-button-success' onClick={()=>userOpen('0',record)}>导入用户</Button>:''\r\n          }\r\n          {\r\n            userInfo.roleId.functionList.includes('5e99cb85d1ba729a78b016c2')?\r\n            <Button className='custom-button-info' onClick={()=>userOpen('1',record)}>移除用户</Button>:''\r\n          }\r\n        </Space>\r\n      )\r\n    }\r\n  ]\r\n  let userTableColumns = [\r\n    {\r\n      title: '用户名',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'name'\r\n    },\r\n    {\r\n      title: '邮箱',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'email'\r\n    },\r\n    {\r\n      title: '手机号码',\r\n      align: 'center' as 'center',\r\n      dataIndex: 'phone',\r\n      render: (text:string, record:any) => (\r\n        <span>\r\n          {text || '--'}\r\n        </span>\r\n      )\r\n    }\r\n  ]\r\n  const userHraderFlex = {\r\n    marginBottom: '20px',\r\n    paddingRight: '20px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getDataList()\r\n    getTreeList()\r\n  }, []);\r\n\r\n  // 获取列表数据\r\n  const getDataList = (page?: Boolean)=>{\r\n    pageObj.currentPage = page === true?pageObj.currentPage:1;\r\n    let formModel = searchForm.getFieldsValue();\r\n    let sortOrders = '';\r\n    if(sortObj.sortOrders){\r\n      if(sortObj.sortOrders === 'ascend'){\r\n        sortOrders = '1';\r\n      }else{\r\n        sortOrders = '0';\r\n      }\r\n    }\r\n    api.role.roleList({\r\n      currentPage: pageObj.currentPage,\r\n      pageSize: pageObj.pageSize,\r\n      name: formModel.name,\r\n      sortBy: sortObj.sortBy,\r\n      sortOrders\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        pageObj.total = res.data.data.count;\r\n        setPageObj({...pageObj})\r\n        setTableData([...res.data.data.data])\r\n      }else{\r\n        message.warning('获取角色列表失败');\r\n      }\r\n    })\r\n  }\r\n\r\n  const getTreeList = ()=>{\r\n    api.menu.menuTree({}).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        let treeList = res.data.data;\r\n        if(treeList.length > 0){\r\n          treeList = treeHandle(treeList)\r\n        }\r\n        setTreeData([...treeList])\r\n      }else{\r\n        message.warning('获取菜单列表失败');\r\n      }\r\n    })\r\n  }\r\n  // 树数据处理\r\n  const treeHandle = (arr:any[])=>{\r\n    arr.map((item:any)=>{\r\n      if(item.functionList && item.functionList.length > 0){\r\n        item.children = item.functionList\r\n      }\r\n      if (item.children && item.children.length > 0) {\r\n        item.children = treeHandle(item.children)\r\n      }\r\n      item.key = item._id;\r\n    })\r\n    return arr\r\n  }\r\n  // table排序分页变化\r\n  const tableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(pageObj.currentPage !== pagination.current || pageObj.pageSize !== pagination.pageSize){\r\n      pageObj.currentPage = pagination.current;\r\n      pageObj.pageSize = pagination.pageSize;\r\n      setPageObj({...pageObj})\r\n      getDataList(true)\r\n    }\r\n    if(JSON.stringify(sorter) !== '{}'){\r\n      if(sorter.field !== sortObj.sortBy || sorter.order !== sortObj.sortOrders){\r\n        sortObj.sortBy = sorter.order?sorter.field:'';\r\n        sortObj.sortOrders = sorter.order?sorter.order:'';\r\n        setSortObj({...sortObj})\r\n        getDataList()\r\n      }\r\n    }\r\n  }\r\n  const userTableChange = (pagination:any, filters:any, sorter:any) =>{\r\n    if(userPageObj.currentPage !== pagination.current || userPageObj.pageSize !== pagination.pageSize){\r\n      clearSelect()\r\n      userPageObj.currentPage = pagination.current;\r\n      userPageObj.pageSize = pagination.pageSize;\r\n      setUserPageObj({...userPageObj})\r\n      getUser(true)\r\n    }\r\n  }\r\n  // 角色删除\r\n  const roleRemove = (row:any)=>{\r\n    if(row.type === '4'){\r\n      confirm({\r\n        title: '提示',\r\n        content: '此操作将删除该角色信息, 是否继续?',\r\n        closable: true,\r\n        okType: 'danger',\r\n        onOk() {\r\n          return new Promise((resolve, reject) => {\r\n            api.role.roleDel(row._id).then((res)=>{\r\n              let code = res.data.code;\r\n              resolve('')\r\n              if(code === constantData.reqSuccess){\r\n                getDataList();\r\n                message.success('角色删除成功');\r\n              }else if(code === constantData.dataAlready){\r\n                message.warning('该角色不支持删除');\r\n              }else{\r\n                message.warning('角色删除失败');\r\n              }\r\n            })\r\n          }).catch(() => {});\r\n        }\r\n      });\r\n    }else{\r\n      message.warning('该角色不支持删除');\r\n    }\r\n  }\r\n  // 角色新增\r\n  const roleAdd = ()=>{\r\n    modalObj.title = '新增角色';\r\n    modalObj.selectRow = {};\r\n    modalObj.visible = true;\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 权限配置打开弹框\r\n  const authOpen = (row:any)=>{\r\n    modalAuth.visible = true;\r\n    modalAuth.selectRow = row;\r\n    setSelectTreeArr([...row.functionList])\r\n    setModalAuth({...modalAuth})\r\n  }\r\n  // 点击树节点勾选框\r\n  const onTreeCheck = (checkedKeys:any)=>{\r\n    setSelectTreeArr([...checkedKeys]);\r\n  }\r\n  // 权限配置确认\r\n  const modalAuthConfir = ()=>{\r\n    let functionList:string[] = []\r\n    let menuList:string[] = []\r\n    let targetData:any = {}\r\n    if(selectTreeArr.length > 0){\r\n      treeAuthHandle(treeData[0].children, functionList)\r\n      treeFunctionLoop(targetData,treeData)\r\n    }\r\n    if(functionList.length > 0){\r\n      functionList.forEach((item)=>{\r\n        let menuArr:string[] = getMenuArr(item,targetData)\r\n        menuArr.pop()\r\n        menuList = [...menuArr, ...menuList];\r\n      })\r\n      menuList = menuList.filter((item, index) => menuList.indexOf(item) === index);\r\n    }\r\n    modalAuth.loading = true;\r\n    setModalAuth({...modalAuth})\r\n    api.role.setRoleAuth({\r\n      id: modalAuth.selectRow._id,\r\n      functionList: functionList.length > 0?functionList.join(','):'',\r\n      menuList:menuList.length > 0?menuList.join(','):''\r\n    }).then((res)=>{\r\n      let code = res.data.code\r\n      modalAuth.loading = false;\r\n      if(code === constantData.reqSuccess){\r\n        modalAuth.visible = false;\r\n        getDataList();\r\n        message.success('角色权限配置成功');\r\n      }else{\r\n        message.warning('角色权限配置失败');\r\n      }\r\n      setModalAuth({...modalAuth})\r\n    })\r\n  }\r\n  // 获取功能列表\r\n  const treeAuthHandle = (data: any[], functionList: string[])=>{\r\n    data.map((item)=>{\r\n      if(item.children){\r\n        treeAuthHandle(item.children, functionList)\r\n      }else{\r\n        if(selectTreeArr.includes(item._id)){\r\n          functionList.push(item._id)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  // 获取从功能到菜单单链\r\n  const treeFunctionLoop = (targetData: any, data: any[], parent?: any)=>{\r\n    return data.map(({ children, _id }) => {\r\n      const node:any = {\r\n        _id,\r\n        parent\r\n      }\r\n      targetData[_id] = node;\r\n      if(children){\r\n        node.children = treeFunctionLoop(targetData,children, node);\r\n      }\r\n      return\r\n    })\r\n  }\r\n  // 根据功能ID获取所有父菜单ID\r\n  const getMenuArr = (value:string, targetData: any):any[] => {\r\n    let node = [];\r\n    let currentNode = targetData[value];\r\n    node.push(currentNode._id);\r\n    if (currentNode.parent) {\r\n      node = [...getMenuArr(currentNode.parent._id, targetData), ...node];\r\n    }\r\n    return node\r\n  }\r\n  // 角色用户列表打开\r\n  const userOpen = (type:string, row:any)=>{\r\n    userModal.selectRow = row;\r\n    userModal.type = type;\r\n    userModal.selectName = '';\r\n    setUserModal({...userModal})\r\n    clearSelect();\r\n    getUser()\r\n  }\r\n  // 获取列表数据\r\n  const getUser = (page?: Boolean)=>{\r\n    userPageObj.currentPage = page === true?userPageObj.currentPage:1;\r\n    api.role.roleUserList({\r\n      currentPage: userPageObj.currentPage,\r\n      pageSize: userPageObj.pageSize,\r\n      name: userModal.selectName,\r\n      roleId: userModal.selectRow._id,\r\n      type: userModal.type\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      if(code === constantData.reqSuccess){\r\n        userPageObj.total = res.data.data.count;\r\n        setUserPageObj({...userPageObj})\r\n        setUserTableData([...res.data.data.data])\r\n        userModal.visible = true;\r\n        setUserModal({...userModal})\r\n      }else{\r\n        message.warning('获取用户列表失败');\r\n      }\r\n    })\r\n  }\r\n  const onSearch = (val:string)=>{\r\n    userModal.selectName = val;\r\n    setUserModal({...userModal})\r\n    clearSelect();\r\n    getUser()\r\n  }\r\n  // 导入或移除用户确认\r\n  const userOperate = ()=>{\r\n    userModal.loading = true;\r\n    setUserModal({...userModal})\r\n    let successTxt = '导入用户成功'\r\n    let failTxt = '导入用户失败'\r\n    if(userModal.type === '1'){\r\n      successTxt = '移除用户成功'\r\n      failTxt = '移除用户失败'\r\n    }\r\n    api.role.updateMuchUser({\r\n      roleId: userModal.selectRow._id,\r\n      type: userModal.type,\r\n      ids: selectedRowArr.join(',')\r\n    }).then(res =>{\r\n      let code = res.data.code\r\n      userModal.loading = false;\r\n      if(code === constantData.reqSuccess){\r\n        userModal.visible = false;\r\n        message.success(successTxt);\r\n      }else if(code === constantData.statusFail){\r\n        message.warning('选择用户不存在');\r\n      }else{\r\n        message.warning(failTxt);\r\n      }\r\n      setUserModal({...userModal})\r\n    })\r\n  }\r\n  // 编辑打开弹框\r\n  const editRole = (row:any)=>{\r\n    modalObj.title = '编辑角色';\r\n    modalObj.selectRow = row;\r\n    modalObj.visible = true;\r\n    modalForm.setFieldsValue({ \r\n      name: row.name,\r\n      description: row.description\r\n    })\r\n    setModalObj({...modalObj})\r\n  }\r\n  // 新增或编辑提交\r\n  const modalConfir = ()=>{\r\n    modalForm.validateFields().then((values)=>{\r\n      modalObj.loading = true;\r\n      setModalObj({...modalObj})\r\n      if(modalObj.selectRow._id){\r\n        api.role.roleUpdate({\r\n          id: modalObj.selectRow._id,\r\n          name: values.name,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            getDataList();\r\n            message.success('角色信息更新成功');\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('角色名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('角色信息更新失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }else{\r\n        api.role.roleAdd({\r\n          name: values.name,\r\n          description: values.description\r\n        }).then((res)=>{\r\n          let code = res.data.code\r\n          modalObj.loading = false;\r\n          if(code === constantData.reqSuccess){\r\n            modalObj.visible = false;\r\n            modalForm.resetFields();\r\n            getDataList();\r\n          }else if(code === constantData.dataAlready){\r\n            message.warning('角色名称已存在');\r\n            modalForm.setFieldsValue({ \r\n              name: ''\r\n            })\r\n          }else{\r\n            message.warning('角色信息添加失败');\r\n          }\r\n          setModalObj({...modalObj})\r\n        })\r\n      }\r\n    }).catch(()=>{});\r\n  }\r\n  // 关闭弹框\r\n  const modalCancel = ()=>{\r\n    modalObj.visible = false;\r\n    modalForm.resetFields();\r\n    setModalObj({...modalObj})\r\n  }\r\n  const modalAuthCancel = ()=>{\r\n    modalAuth.visible = false;\r\n    setModalAuth({...modalAuth})\r\n  }\r\n  const userModalCancel = ()=>{\r\n    userModal.visible = false;\r\n    clearSelect();\r\n    setUserModal({...userModal})\r\n  }\r\n  // 清空所选\r\n  const clearSelect = ()=>{\r\n    setSelectedRowArr([])\r\n    setSelectArr([])\r\n  }\r\n\r\n  return <div className='role-wrapper'>\r\n    <h2 className='content-title'>角色管理</h2>\r\n    <div className=\"box-table\">\r\n      <Form\r\n        layout='inline'\r\n        form={searchForm}\r\n      >\r\n        <Form.Item label=\"角色名称\" name='name' className='margin-bottom-20'>\r\n           <Input \r\n            maxLength={20} \r\n            allowClear={true}\r\n            onBlur={()=>{getDataList()}} \r\n            placeholder=\"角色名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item className='margin-left-30 margin-bottom-20'>\r\n           {\r\n             userInfo.roleId.functionList.includes('5e83505dfb69305aa091e83a')?<Button type=\"primary\" onClick={roleAdd}>新增角色</Button>:''\r\n           }\r\n        </Form.Item>\r\n      </Form>\r\n      <div className=\"table-show\">\r\n        <Table rowKey='_id' columns={tableColumns} dataSource={tableData} pagination={{\r\n          total: pageObj.total,\r\n          showTotal: ()=>`共 ${pageObj.total} 条`,\r\n          current: pageObj.currentPage,\r\n          pageSize: pageObj.pageSize,\r\n        }} onChange={tableChange} />\r\n      </div>\r\n    </div>\r\n    <Modal title={modalObj.title} maskClosable={false} confirmLoading={modalObj.loading} visible={modalObj.visible} onOk={modalConfir} onCancel={modalCancel}>\r\n    <Form\r\n        form={modalForm}\r\n        validateTrigger='onBlur'\r\n        requiredMark={false}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"角色名称\"\r\n          rules={FormValidate({name: '角色名称'})}\r\n        >\r\n          <Input \r\n            maxLength={20} \r\n            allowClear={true} \r\n            placeholder=\"角色名称\" \r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"角色描述\"\r\n        >\r\n          <TextArea rows={2} maxLength={60} allowClear={true} placeholder=\"角色描述\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n    <Modal title='权限配置' okText='配置' maskClosable={false} confirmLoading={modalAuth.loading} visible={modalAuth.visible} onOk={modalAuthConfir} onCancel={modalAuthCancel}>\r\n    <Tree\r\n        checkable\r\n        defaultExpandAll={true}\r\n        selectable={false}\r\n        checkedKeys={selectTreeArr}\r\n        treeData={treeData}\r\n        onCheck={onTreeCheck}\r\n        onSelect={onTreeCheck}\r\n      />\r\n    </Modal>\r\n    <Modal title={userModal.type === '1'?'移除用户':'导入用户'} footer={null} width={840} visible={userModal.visible} onCancel={userModalCancel}>\r\n    <div style ={userHraderFlex}>\r\n      <Search placeholder=\"输入用户名搜索\" maxLength={20} allowClear onSearch={onSearch} style={{ width: 280 }} />\r\n      <Button loading={userModal.loading} disabled={selectedRowArr.length === 0} type=\"primary\" onClick={userOperate}>{userModal.type === '1'?'移除用户':'导入用户'}</Button>\r\n    </div>\r\n    <div className=\"table-show\">\r\n      {\r\n        selectedRowArr.length > 0 && <Alert className='alert-desc' message={`已选择 ${selectedRowArr.length} 项`} closeText=\"清除所选\" showIcon={true} type=\"warning\" onClose={clearSelect} />\r\n      }\r\n    <Table \r\n      rowKey='_id'\r\n      columns={userTableColumns} \r\n      dataSource={userTableData} \r\n      pagination={{\r\n      total: userPageObj.total,\r\n      showTotal: ()=>`共 ${userPageObj.total} 条`,\r\n      current: userPageObj.currentPage,\r\n      pageSize: userPageObj.pageSize,\r\n      }} \r\n      rowSelection={{\r\n        selectedRowKeys: selectedRowArr,\r\n        onChange: (selectedRowKeys: any[], selectedRows: any[])=>{\r\n          setSelectedRowArr([...selectedRowKeys])\r\n          setSelectArr([...selectedRows])\r\n        }\r\n      }}\r\n      onChange={userTableChange} />\r\n    </div>\r\n    </Modal>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = (state: StoreState) => ({\r\n  stateData: state\r\n})\r\n\r\nexport default connect(mapStateToProps)(Role)\r\n","F:\\project\\gitDemo\\blog-admin\\src\\index.tsx",[],"F:\\project\\gitDemo\\blog-admin\\src\\router\\index.tsx",["277"],"F:\\project\\gitDemo\\blog-admin\\src\\store\\reducers.ts",["278"],["279","280"],"F:\\project\\gitDemo\\blog-admin\\src\\utils\\utils.ts",[],"F:\\project\\gitDemo\\blog-admin\\src\\components\\ReactParticles.tsx",[],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\error\\index.tsx",[],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\articleTag\\index.tsx",["281"],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\menu\\index.tsx",["282","283","284","285"],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\user\\index.tsx",["286"],"F:\\project\\gitDemo\\blog-admin\\src\\components\\MyEcharts.tsx",[],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\forget\\index.tsx",[],"F:\\project\\gitDemo\\blog-admin\\src\\utils\\format.ts",[],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\link\\index.tsx",["287"],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\project\\index.tsx",["288"],"F:\\project\\gitDemo\\blog-admin\\src\\pages\\articleList\\index.tsx",["289"],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"290","replacedBy":"294"},{"ruleId":"292","replacedBy":"295"},{"ruleId":"290","replacedBy":"296"},{"ruleId":"292","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":24,"column":1,"nodeType":"300","endLine":32,"endColumn":2},{"ruleId":"290","replacedBy":"301"},{"ruleId":"292","replacedBy":"302"},{"ruleId":"290","replacedBy":"303"},{"ruleId":"292","replacedBy":"304"},{"ruleId":"305","severity":1,"message":"306","line":520,"column":6,"nodeType":"307","endLine":520,"endColumn":8,"suggestions":"308"},{"ruleId":"305","severity":1,"message":"309","line":525,"column":6,"nodeType":"307","endLine":525,"endColumn":19,"suggestions":"310"},{"ruleId":"290","replacedBy":"311"},{"ruleId":"292","replacedBy":"312"},{"ruleId":"305","severity":1,"message":"313","line":128,"column":5,"nodeType":"307","endLine":128,"endColumn":30,"suggestions":"314"},{"ruleId":"305","severity":1,"message":"315","line":27,"column":6,"nodeType":"307","endLine":27,"endColumn":8,"suggestions":"316"},{"ruleId":"298","severity":1,"message":"317","line":243,"column":1,"nodeType":"300","endLine":253,"endColumn":2},{"ruleId":"290","replacedBy":"318"},{"ruleId":"292","replacedBy":"319"},{"ruleId":"290","replacedBy":"320"},{"ruleId":"292","replacedBy":"321"},{"ruleId":"305","severity":1,"message":"322","line":32,"column":5,"nodeType":"307","endLine":32,"endColumn":24,"suggestions":"323"},{"ruleId":"305","severity":1,"message":"324","line":295,"column":6,"nodeType":"307","endLine":295,"endColumn":8,"suggestions":"325"},{"ruleId":"290","replacedBy":"326"},{"ruleId":"292","replacedBy":"327"},{"ruleId":"305","severity":1,"message":"328","line":52,"column":6,"nodeType":"307","endLine":52,"endColumn":8,"suggestions":"329"},{"ruleId":"330","severity":1,"message":"331","line":238,"column":37,"nodeType":"332","messageId":"333","endLine":238,"endColumn":39},{"ruleId":"330","severity":1,"message":"331","line":254,"column":20,"nodeType":"332","messageId":"333","endLine":254,"endColumn":22},{"ruleId":"330","severity":1,"message":"331","line":279,"column":20,"nodeType":"332","messageId":"333","endLine":279,"endColumn":22},{"ruleId":"330","severity":1,"message":"331","line":406,"column":51,"nodeType":"332","messageId":"333","endLine":406,"endColumn":53},{"ruleId":"290","replacedBy":"334"},{"ruleId":"292","replacedBy":"335"},{"ruleId":"305","severity":1,"message":"336","line":119,"column":6,"nodeType":"307","endLine":119,"endColumn":8,"suggestions":"337"},{"ruleId":"305","severity":1,"message":"324","line":123,"column":6,"nodeType":"307","endLine":123,"endColumn":17,"suggestions":"338"},{"ruleId":"305","severity":1,"message":"324","line":100,"column":6,"nodeType":"307","endLine":100,"endColumn":8,"suggestions":"339"},{"ruleId":"305","severity":1,"message":"324","line":108,"column":6,"nodeType":"307","endLine":108,"endColumn":8,"suggestions":"340"},{"ruleId":"290","replacedBy":"341"},{"ruleId":"292","replacedBy":"342"},{"ruleId":"305","severity":1,"message":"324","line":88,"column":6,"nodeType":"307","endLine":88,"endColumn":8,"suggestions":"343"},{"ruleId":"305","severity":1,"message":"324","line":98,"column":6,"nodeType":"307","endLine":98,"endColumn":8,"suggestions":"344"},{"ruleId":"330","severity":1,"message":"345","line":52,"column":98,"nodeType":"332","messageId":"333","endLine":52,"endColumn":100},{"ruleId":"330","severity":1,"message":"345","line":57,"column":98,"nodeType":"332","messageId":"333","endLine":57,"endColumn":100},{"ruleId":"305","severity":1,"message":"346","line":71,"column":6,"nodeType":"307","endLine":71,"endColumn":8,"suggestions":"347"},{"ruleId":"348","severity":1,"message":"349","line":292,"column":23,"nodeType":"350","messageId":"351","endLine":292,"endColumn":25},{"ruleId":"330","severity":1,"message":"345","line":312,"column":98,"nodeType":"332","messageId":"333","endLine":312,"endColumn":100},{"ruleId":"330","severity":1,"message":"345","line":317,"column":98,"nodeType":"332","messageId":"333","endLine":317,"endColumn":100},{"ruleId":"348","severity":1,"message":"349","line":332,"column":26,"nodeType":"350","messageId":"351","endLine":332,"endColumn":28},{"ruleId":"348","severity":1,"message":"349","line":342,"column":26,"nodeType":"350","messageId":"351","endLine":342,"endColumn":28},{"ruleId":"305","severity":1,"message":"324","line":120,"column":6,"nodeType":"307","endLine":120,"endColumn":8,"suggestions":"352"},{"ruleId":"353","severity":1,"message":"354","line":3,"column":10,"nodeType":"355","messageId":"356","endLine":3,"endColumn":23},{"ruleId":"353","severity":1,"message":"357","line":22,"column":8,"nodeType":"355","messageId":"356","endLine":22,"endColumn":17},{"ruleId":"305","severity":1,"message":"358","line":150,"column":6,"nodeType":"307","endLine":150,"endColumn":8,"suggestions":"359"},{"ruleId":"348","severity":1,"message":"349","line":198,"column":23,"nodeType":"350","messageId":"351","endLine":198,"endColumn":25},{"ruleId":"348","severity":1,"message":"349","line":320,"column":20,"nodeType":"350","messageId":"351","endLine":320,"endColumn":22},{"ruleId":"348","severity":1,"message":"349","line":341,"column":7,"nodeType":"360","messageId":"361","endLine":341,"endColumn":13},{"ruleId":"305","severity":1,"message":"315","line":27,"column":6,"nodeType":"307","endLine":27,"endColumn":8,"suggestions":"362"},{"ruleId":"298","severity":1,"message":"299","line":24,"column":1,"nodeType":"300","endLine":32,"endColumn":2},{"ruleId":"290","replacedBy":"363"},{"ruleId":"292","replacedBy":"364"},{"ruleId":"305","severity":1,"message":"324","line":100,"column":6,"nodeType":"307","endLine":100,"endColumn":8,"suggestions":"365"},{"ruleId":"305","severity":1,"message":"346","line":71,"column":6,"nodeType":"307","endLine":71,"endColumn":8,"suggestions":"366"},{"ruleId":"348","severity":1,"message":"349","line":292,"column":23,"nodeType":"350","messageId":"351","endLine":292,"endColumn":25},{"ruleId":"348","severity":1,"message":"349","line":332,"column":26,"nodeType":"350","messageId":"351","endLine":332,"endColumn":28},{"ruleId":"348","severity":1,"message":"349","line":342,"column":26,"nodeType":"350","messageId":"351","endLine":342,"endColumn":28},{"ruleId":"305","severity":1,"message":"324","line":120,"column":6,"nodeType":"307","endLine":120,"endColumn":8,"suggestions":"367"},{"ruleId":"305","severity":1,"message":"324","line":88,"column":6,"nodeType":"307","endLine":88,"endColumn":8,"suggestions":"368"},{"ruleId":"305","severity":1,"message":"324","line":108,"column":6,"nodeType":"307","endLine":108,"endColumn":8,"suggestions":"369"},{"ruleId":"305","severity":1,"message":"324","line":295,"column":6,"nodeType":"307","endLine":295,"endColumn":8,"suggestions":"370"},"no-native-reassign",["371"],"no-negated-in-lhs",["372"],["371"],["372"],["371"],["372"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["371"],["372"],["371"],["372"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTotalNum' and 'initChart'. Either include them or remove the dependency array.","ArrayExpression",["373"],"React Hook useEffect has a missing dependency: 'radioChange'. Either include it or remove the dependency array.",["374"],["371"],["372"],"React Hook useEffect has missing dependencies: 'getBreadCrumb' and 'getSelectKeyArr'. Either include them or remove the dependency array.",["375"],"React Hook useEffect has a missing dependency: 'setUserInfo'. Either include it or remove the dependency array.",["376"],"Assign object to a variable before exporting as module default",["371"],["372"],["371"],["372"],"React Hook useEffect has a missing dependency: 'tagsArr'. Either include it or remove the dependency array.",["377"],"React Hook useEffect has a missing dependency: 'getDataList'. Either include it or remove the dependency array.",["378"],["371"],["372"],"React Hook useEffect has missing dependencies: 'articleForm', 'getDataDetail', 'seteditor', and 'state'. Either include them or remove the dependency array.",["379"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["371"],["372"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["380"],["381"],["382"],["383"],["371"],["372"],["384"],["385"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getTreeList'. Either include it or remove the dependency array.",["386"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["387"],"@typescript-eslint/no-unused-vars","'AudioOutlined' is defined but never used.","Identifier","unusedVar","'selectArr' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getDataList' and 'getTreeList'. Either include them or remove the dependency array.",["388"],"ReturnStatement","expectedReturnValue",["389"],["371"],["372"],["390"],["391"],["392"],["393"],["394"],["395"],"no-global-assign","no-unsafe-negation",{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"406","fix":"414"},{"desc":"406","fix":"415"},{"desc":"406","fix":"416"},{"desc":"406","fix":"417"},{"desc":"418","fix":"419"},{"desc":"406","fix":"420"},{"desc":"421","fix":"422"},{"desc":"402","fix":"423"},{"desc":"406","fix":"424"},{"desc":"418","fix":"425"},{"desc":"406","fix":"426"},{"desc":"406","fix":"427"},{"desc":"406","fix":"428"},{"desc":"406","fix":"429"},"Update the dependencies array to be: [getTotalNum, initChart]",{"range":"430","text":"431"},"Update the dependencies array to be: [activeIndex, radioChange]",{"range":"432","text":"433"},"Update the dependencies array to be: [getBreadCrumb, getSelectKeyArr, props.location.pathname]",{"range":"434","text":"435"},"Update the dependencies array to be: [setUserInfo]",{"range":"436","text":"437"},"Update the dependencies array to be: [location.pathname, tagsArr]",{"range":"438","text":"439"},"Update the dependencies array to be: [getDataList]",{"range":"440","text":"441"},"Update the dependencies array to be: [articleForm, getDataDetail, seteditor, state]",{"range":"442","text":"443"},"Update the dependencies array to be: [state]",{"range":"444","text":"445"},"Update the dependencies array to be: [articleId, getDataList]",{"range":"446","text":"447"},{"range":"448","text":"441"},{"range":"449","text":"441"},{"range":"450","text":"441"},{"range":"451","text":"441"},"Update the dependencies array to be: [getTreeList]",{"range":"452","text":"453"},{"range":"454","text":"441"},"Update the dependencies array to be: [getDataList, getTreeList]",{"range":"455","text":"456"},{"range":"457","text":"437"},{"range":"458","text":"441"},{"range":"459","text":"453"},{"range":"460","text":"441"},{"range":"461","text":"441"},{"range":"462","text":"441"},{"range":"463","text":"441"},[13500,13502],"[getTotalNum, initChart]",[13566,13579],"[activeIndex, radioChange]",[3755,3780],"[getBreadCrumb, getSelectKeyArr, props.location.pathname]",[1132,1134],"[setUserInfo]",[878,897],"[location.pathname, tagsArr]",[8533,8535],"[getDataList]",[1936,1938],"[articleForm, getDataDetail, seteditor, state]",[3870,3872],"[state]",[3923,3934],"[articleId, getDataList]",[2840,2842],[3089,3091],[2486,2488],[2880,2882],[2344,2346],"[getTreeList]",[3557,3559],[4304,4306],"[getDataList, getTreeList]",[1132,1134],[2840,2842],[2346,2348],[3557,3559],[2486,2488],[3089,3091],[8533,8535]]